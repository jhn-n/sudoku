(()=>{"use strict";var __webpack_modules__={56:(module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdWRva3UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanM/ZGRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n')},72:module=>{eval('\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdWRva3UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72\n')},113:module=>{eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vkb2t1Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanM/MWRkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///113\n")},208:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\n    box-sizing: border-box;\n    background-color: whitesmoke;\n    --grid-color: whitesmoke;\n    --grid-width: clamp(45rem, 90vw, 80vh);\n    --value-fontsize: clamp(3rem, 6vw, 6vh);\n    --note-fontsize: clamp(1rem, 2vw, 2vh);\n}\n\n.grid {\n    font-family:\n        ui-monospace, "Cascadia Code", "Source Code Pro", Menlo, Consolas,\n        "DejaVu Sans Mono", monospace;\n    background-color: var(--grid-color);\n    font-weight: normal;\n    border: black 2px solid;\n    width: var(--grid-width);\n    height: var(--grid-width);\n    margin: auto;\n    display: grid;\n    grid-template-columns: repeat(9, 1fr);\n    grid-template-rows: repeat(9, 1fr);\n    cursor: pointer;\n    user-select: none;\n}\n\n.cell {\n    border: black 1px solid;\n}\n\n.cell.row0,\n.cell.row3,\n.cell.row6 {\n    border-top: black 2px solid;\n}\n\n.cell.row2,\n.cell.row5,\n.cell.row8 {\n    border-bottom: black 2px solid;\n}\n\n.cell.col0,\n.cell.col3,\n.cell.col6 {\n    border-left: black 2px solid;\n}\n\n.cell.col2,\n.cell.col5,\n.cell.col8 {\n    border-right: black 2px solid;\n}\n\n.cell.value {\n    font-size: var(--value-fontsize);\n    display: grid;\n    place-content: center;\n}\n\n.cell.notes {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: repeat(3, 1fr);\n    font-size: var(--note-fontsize);\n}\n\n.cell.move-line {\n    background: #c0c0c0;\n}\n\n.cell.invalid-line {\n    background-color: #ddd;\n}\n\n.cell.invalid-square {\n    background-color: yellow;\n}\n\n.note {\n    display: grid;\n    place-content: center;\n    color: #505050;\n    border: transparent 2px solid;\n    border-radius: 50%;\n}\n\n.note.yes:hover {\n    border: blue 2px solid;\n    border-radius: 50%;\n}\n\n.note.no {\n    opacity: 0;\n}\n\n.note.no:hover {\n    opacity: 0.3;\n}\n\n.note.move-keynote {\n    color: blue;\n}\n\n.note.move-deadnote {\n    color: red;\n}\n\n.buttonContainer {\n    display: flex;\n    justify-content: space-evenly;\n    margin: 5px 0;\n}\n\n.button {\n    border: 1px black solid;\n    cursor: pointer;\n    user-select: none;\n    width: 6em;\n    text-align: center;\n}\n\n.messageContainer {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    user-select: none;\n}\n`, "",{"version":3,"sources":["webpack://./src/style.css"],"names":[],"mappings":"AAAA;IACI,sBAAsB;IACtB,4BAA4B;IAC5B,wBAAwB;IACxB,sCAAsC;IACtC,uCAAuC;IACvC,sCAAsC;AAC1C;;AAEA;IACI;;qCAEiC;IACjC,mCAAmC;IACnC,mBAAmB;IACnB,uBAAuB;IACvB,wBAAwB;IACxB,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,qCAAqC;IACrC,kCAAkC;IAClC,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;;;IAGI,2BAA2B;AAC/B;;AAEA;;;IAGI,8BAA8B;AAClC;;AAEA;;;IAGI,4BAA4B;AAChC;;AAEA;;;IAGI,6BAA6B;AACjC;;AAEA;IACI,gCAAgC;IAChC,aAAa;IACb,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,qCAAqC;IACrC,kCAAkC;IAClC,+BAA+B;AACnC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,cAAc;IACd,6BAA6B;IAC7B,kBAAkB;AACtB;;AAEA;IACI,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,aAAa;AACjB;;AAEA;IACI,uBAAuB;IACvB,eAAe;IACf,iBAAiB;IACjB,UAAU;IACV,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,iBAAiB;AACrB","sourcesContent":["body {\\n    box-sizing: border-box;\\n    background-color: whitesmoke;\\n    --grid-color: whitesmoke;\\n    --grid-width: clamp(45rem, 90vw, 80vh);\\n    --value-fontsize: clamp(3rem, 6vw, 6vh);\\n    --note-fontsize: clamp(1rem, 2vw, 2vh);\\n}\\n\\n.grid {\\n    font-family:\\n        ui-monospace, \\"Cascadia Code\\", \\"Source Code Pro\\", Menlo, Consolas,\\n        \\"DejaVu Sans Mono\\", monospace;\\n    background-color: var(--grid-color);\\n    font-weight: normal;\\n    border: black 2px solid;\\n    width: var(--grid-width);\\n    height: var(--grid-width);\\n    margin: auto;\\n    display: grid;\\n    grid-template-columns: repeat(9, 1fr);\\n    grid-template-rows: repeat(9, 1fr);\\n    cursor: pointer;\\n    user-select: none;\\n}\\n\\n.cell {\\n    border: black 1px solid;\\n}\\n\\n.cell.row0,\\n.cell.row3,\\n.cell.row6 {\\n    border-top: black 2px solid;\\n}\\n\\n.cell.row2,\\n.cell.row5,\\n.cell.row8 {\\n    border-bottom: black 2px solid;\\n}\\n\\n.cell.col0,\\n.cell.col3,\\n.cell.col6 {\\n    border-left: black 2px solid;\\n}\\n\\n.cell.col2,\\n.cell.col5,\\n.cell.col8 {\\n    border-right: black 2px solid;\\n}\\n\\n.cell.value {\\n    font-size: var(--value-fontsize);\\n    display: grid;\\n    place-content: center;\\n}\\n\\n.cell.notes {\\n    display: grid;\\n    grid-template-columns: repeat(3, 1fr);\\n    grid-template-rows: repeat(3, 1fr);\\n    font-size: var(--note-fontsize);\\n}\\n\\n.cell.move-line {\\n    background: #c0c0c0;\\n}\\n\\n.cell.invalid-line {\\n    background-color: #ddd;\\n}\\n\\n.cell.invalid-square {\\n    background-color: yellow;\\n}\\n\\n.note {\\n    display: grid;\\n    place-content: center;\\n    color: #505050;\\n    border: transparent 2px solid;\\n    border-radius: 50%;\\n}\\n\\n.note.yes:hover {\\n    border: blue 2px solid;\\n    border-radius: 50%;\\n}\\n\\n.note.no {\\n    opacity: 0;\\n}\\n\\n.note.no:hover {\\n    opacity: 0.3;\\n}\\n\\n.note.move-keynote {\\n    color: blue;\\n}\\n\\n.note.move-deadnote {\\n    color: red;\\n}\\n\\n.buttonContainer {\\n    display: flex;\\n    justify-content: space-evenly;\\n    margin: 5px 0;\\n}\\n\\n.button {\\n    border: 1px black solid;\\n    cursor: pointer;\\n    user-select: none;\\n    width: 6em;\\n    text-align: center;\\n}\\n\\n.messageContainer {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    user-select: none;\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///208\n')},314:module=>{eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdWRva3UvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///314\n')},354:module=>{eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vkb2t1Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanM/YWYxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///354\n')},540:module=>{eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdWRva3UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///540\n')},659:module=>{eval('\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N1ZG9rdS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanM/YjIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///659\n')},825:module=>{eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n  var needLayer = typeof obj.layer !== "undefined";\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += "}";\n  }\n  if (obj.media) {\n    css += "}";\n  }\n  if (obj.supports) {\n    css += "}";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === "undefined") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vkb2t1Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanM/ZTQ3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///825\n')},968:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(72);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(56);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/style.css\nvar style = __webpack_require__(208);\n;// ./src/style.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, "head");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(style/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const src_style = (style/* default */.A && style/* default */.A.locals ? style/* default */.A.locals : undefined);\n\n;// ./src/mods/mod-sqs.js\nconsole.time("Sqs setup")\n\nconst mod_sqs_all = [...Array(81).keys()];\n\nfunction rowOf(c) {\n    return Math.floor(c / 9);\n}\n\nfunction columnOf(c) {\n    return c % 9;\n}\n\nfunction blockOf(c) {\n    return 3 * Math.floor(rowOf(c) / 3) + Math.floor(columnOf(c) / 3);\n}\n\nfunction sameRow(c1, c2) {\n    return rowOf(c1) === rowOf(c2);\n}\n\nfunction sameColumn(c1, c2) {\n    return columnOf(c1) === columnOf(c2);\n}\n\nfunction sameBlock(c1, c2) {\n    return blockOf(c1) === blockOf(c2);\n}\n\nfunction arePeers(c1, c2) {\n    if (sameRow(c1, c2) || sameColumn(c1, c2) || sameBlock(c1, c2)) {\n        return true;\n    }\n    return false;\n}\n\nfunction indexFromRowColumn(r, c) {\n    return 9 * r + c;\n}\n\nconst rows = [];\nfor (let r = 0; r < 9; r++) {\n    const currentLine = [];\n    for (let c = 0; c < 9; c++) {\n        currentLine.push(indexFromRowColumn(r, c));\n    }\n    rows.push(currentLine);\n}\n\nconst columns = [];\nfor (let c = 0; c < 9; c++) {\n    const currentLine = [];\n    for (let r = 0; r < 9; r++) {\n        currentLine.push(indexFromRowColumn(r, c));\n    }\n    columns.push(currentLine);\n}\n\nconst blocks = [];\nfor (let r = 0; r < 9; r += 3) {\n    for (let c = 0; c < 9; c += 3) {\n        blocks.push(createBlockArray(r, c));\n    }\n}\n\nfunction createBlockArray(startRow, startColumn) {\n    const block = [];\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            block.push(indexFromRowColumn(startRow + i, startColumn + j));\n        }\n    }\n    return block;\n}\n\nconst houses = rows.concat(columns).concat(blocks);\n\nconst peers = [];\nmod_sqs_all.forEach((i) => {\n    const currentPeers = [];\n    mod_sqs_all.forEach((j) => {\n        if (j !== i && arePeers(i, j)) {\n            currentPeers.push(j);\n        }\n    });\n    peers.push(currentPeers);\n});\n\n// add peersOfpeers?\n\nconst sqs = {\n    rowOf,\n    columnOf,\n    blockOf,\n    arePeers,\n    peers,\n    rows,\n    columns,\n    blocks,\n    houses,\n    all: mod_sqs_all,\n};\n\nconsole.timeEnd("Sqs setup")\n;// ./src/mods/mod-bit.js\nconst allNotes = (1 << 9) - 1;\nconst positions = [0, 1, 2, 3, 4, 5, 6, 7, 8];\nconst notePositions = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfunction nth(bit) {\n    return 1 << (bit - 1);\n}\n\nfunction has(num, bit) {\n    return (num & (1 << (bit - 1))) !== 0;\n}\n\nfunction add(num, bit) {\n    return num | (1 << (bit - 1));\n}\n\nfunction remove(num, bit) {\n    return num & ~(1 << (bit - 1));\n}\n\nfunction count(num) {\n    let count = 0;\n    while (num) {\n        count++;\n        num &= num - 1;\n    }\n    return count;\n}\n\nfunction not(num) {\n    return allNotes ^ num;\n}\n\nfunction union(numbers) {\n    return numbers.reduce((acc, curr) => acc | curr, 0);\n}\n\nfunction intersection(numbers) {\n    return numbers.reduce((acc, curr) => acc & curr, not(0));\n}\n\nfunction onePositionsFromZero(n) {\n    return positions.filter((e) => ((1 << e) & n) !== 0);\n}\n\nfunction onePositionsNotes(n) {\n    return notePositions.filter((e) => ((1 << (e - 1)) & n) !== 0);\n}\n\nconst bit = {\n    allNotes,\n    nth,\n    has,\n    add,\n    remove,\n    count,\n    not,\n    union,\n    intersection,\n    onePositionsFromZero,\n    onePositionsNotes,\n};\n\n;// ./src/mods/mod-cmb.js\nconsole.time("Cmb setup");\n\n\nfunction bipartitions(set, k) {\n    const ans = [];\n    for (const comb of bipartitionsNN[set.length][k]) {\n        const subset = comb[0].map((e) => set[e]);\n        const subsetComp = comb[1].map((e) => set[e]);\n        ans.push([subset, subsetComp]);\n    }\n    return ans;\n}\n\nconst bipartitionsNN = [];\nfor (let n = 0; n < 10; n++) {\n    bipartitionsNN.push(BipartitionsOfNaturalNumbers(n));\n}\n\nfunction BipartitionsOfNaturalNumbers(n) {\n    const partitions = [...Array(10)].map(() => []);\n\n    for (let m = 0; m < 1 << n; m++) {\n        const subsetA = [];\n        const subsetB = [];\n        for (let i = 0; i < n; i++) {\n            if (m & (1 << i)) {\n                subsetA.push(i);\n            } else {\n                subsetB.push(i);\n            }\n        }\n        partitions[subsetA.length].push([subsetA, subsetB]);\n    }\n    return partitions;\n}\n\nconst cmb = { bipartitions };\n\nconsole.timeEnd("Cmb setup");\n\n;// ./src/class-Board.js\n\n\n\n\nclass Cell {\n    constructor() {\n        this.value = null;\n        this.notes = bit.allNotes;\n    }\n}\n\nclass NoteLabel {\n    constructor(cellNum, noteNum) {\n        this.cell = cellNum;\n        this.note = noteNum;\n    }\n}\n\nclass InvalidReport {\n    constructor(line, squares) {\n        this.line = line;\n        this.squares = squares;\n    }\n}\n\nclass Board {\n    #cells;\n\n    constructor() {\n        this.#cells = Array(81);\n        sqs.all.forEach((i) => (this.#cells[i] = new Cell()));\n    }\n\n    setNotesOnly(sq, newNotes) {\n        this.#cells[sq].notes = newNotes;\n    }\n\n    getNotes(sq) {\n        return this.#cells[sq].notes;\n    }\n\n    addNote(sq, n) {\n        this.setNotesOnly(sq, bit.add(this.getNotes(sq), n));\n    }\n\n    removeNote(sq, n) {\n        this.setNotesOnly(sq, bit.remove(this.getNotes(sq), n));\n    }\n\n    hasNote(sq, n) {\n        return bit.has(this.getNotes(sq), n);\n    }\n\n    noteCount(sq) {\n        return bit.count(this.getNotes(sq));\n    }\n\n    resetNotes(sq) {\n        this.setNotesOnly(sq, bit.allNotes);\n    }\n\n    setValueOnly(sq, newValue) {\n        this.#cells[sq].value = newValue;\n    }\n\n    getValue(sq) {\n        return this.#cells[sq].value;\n    }\n\n    hasValue(sq) {\n        return this.getValue(sq) !== null;\n    }\n\n    hasNoValue(sq) {\n        return this.getValue(sq) === null;\n    }\n\n    resetCell(sq) {\n        this.setValueOnly(sq, null);\n        this.resetNotes(sq);\n    }\n\n    setValue(sq, value) {\n        this.setValueOnly(sq, value);\n        this.setNotesOnly(sq, 0);\n        this.updateNotesAfterSetValue(sq, value);\n    }\n\n    undoValue(sq) {\n        const value = this.getValue(sq);\n        this.resetCell(sq);\n        this.updateNotesAfterUndoValue(sq, value);\n    }\n\n    isComplete() {\n        return sqs.all.every((i) => this.hasValue(i));\n    }\n    \n    cloneValues() {\n        return sqs.all.map((i) => this.getValue(i));\n    }    \n\n    uploadValues(newValues) {\n        this.resetAll();\n        newValues.forEach((v,i) => this.setValueOnly(i,v));\n        this.recalculateAllNotes();\n    }\n    \n    resetAll() {\n        sqs.all.forEach((i) => this.resetCell(i));\n    }\n\n    cloneAll() {\n        const boardClone = new Board();\n        for (const i of sqs.all) {\n            boardClone.setValueOnly(i, this.getValue(i));\n            boardClone.setNotesOnly(i, this.getNotes(i));\n        }\n        return boardClone;\n    }\n\n    uploadAll(newBoard) {\n        for (const i of sqs.all) {\n            this.setValueOnly(i, newBoard.getValue(i));\n            this.setNotesOnly(i, newBoard.getNotes(i));\n        }\n    }\n\n    noteUnion(squares) {\n        return bit.union(squares.map((i) => this.getNotes(i)));\n    }\n\n    noteIntersection(squares) {\n        return bit.intersection(squares.map((i) => this.getNotes(i)));\n    }\n\n    updateNotesAfterSetValue(sq, value) {\n        sqs.peers[sq].forEach((i) => this.removeNote(i, value));\n    }\n\n    updateNotesAfterUndoValue(sq, undoValue) {\n        for (const i of sqs.peers[sq]) {\n            if (this.hasValue(i)) {\n                this.removeNote(sq, this.getValue(i));\n            } else {\n                if (sqs.peers[i].every((j) => this.getValue(j) !== undoValue)) {\n                    this.addNote(i, undoValue);\n                }\n            }\n        }\n    }\n\n    recalculateAllNotes() {\n        console.time("recalculateAllNotes");\n        sqs.all.filter((i) => this.hasNoValue(i)).forEach((i) => this.resetNotes(i));\n        const valueSquares = sqs.all.filter((i) => this.hasValue(i));\n        valueSquares.forEach((i) => this.updateNotesAfterSetValue(i, this.getValue(i)));\n        console.timeEnd("recalculateAllNotes");\n    }\n\n    createNoteLabels(targetSqs, notesToMatch) {\n        const noteLabels = [];\n        for (const sq of targetSqs) {\n            const hitNotes = this.getNotes(sq) & notesToMatch;\n            const positions = bit.onePositionsNotes(hitNotes);\n            positions.forEach((j) => noteLabels.push(new NoteLabel(sq, j)));\n        }\n        return noteLabels;\n    }\n\n    findInvalidSubset() {\n        console.time("findInvalidSubset");\n        for (const sq of sqs.all.filter((sq) => this.hasNoValue(sq))) {\n            if (this.getNotes(sq) === 0) {\n                return new InvalidReport([], [sq]);\n            }\n        }\n        for (let subsetSize = 2; subsetSize < 9; subsetSize++) {\n            for (const line of sqs.houses) {\n                const activeSquares = line.filter((sq) => this.hasNoValue(sq));\n                for (const subsets of cmb.bipartitions(activeSquares, subsetSize)) {\n                    const subsetSquares = subsets[0];\n                    const subsetNotes = this.noteUnion(subsetSquares);\n                    if (bit.count(subsetNotes) < subsetSize) {\n                        console.timeEnd("findInvalidSubset");\n                        return new InvalidReport(line, subsetSquares);\n                    }\n                }\n            }\n        }\n        console.timeEnd("findInvalidSubset");\n        return null;\n    }\n}\n\n;// ./src/mods/mod-file.js\nconst MaxNumberSavedGames = 100;\nlet startPosition;\nlet gamePositionPtr;\nconst gamePositions = [];\n\nfunction getStartPosition() {\n    return startPosition;\n}\n\nfunction saveStart(board) {\n    startPosition = board.cloneValues();\n    gamePositions.length = 0;\n    gamePositionPtr = -1;\n    saveGame(board);\n}\n\nfunction loadStart(board) {\n    try {\n        board.uploadValues(startPosition);\n    } catch (e) {\n        console.error(`Could not load start position!\\n${e}`);\n    }\n}\n\nfunction saveGame(board) {\n    while (gamePositions.length >= MaxNumberSavedGames) {\n        gamePositions.shift();\n        gamePositionPtr -= 1;\n    }\n    gamePositions.length = gamePositionPtr + 1;\n    gamePositions.push(board.cloneAll());\n    gamePositionPtr += 1;\n}\n\nfunction backGame(board) {\n    if (gamePositionPtr === 0) return;\n    gamePositionPtr -= 1;\n    try {\n        board.uploadAll(gamePositions[gamePositionPtr]);\n    } catch (e) {\n        console.error(`Could not load position in backGame!\\n${e}`);\n    }\n}\n\nfunction forwardGame(board) {\n    if (gamePositions.length === gamePositionPtr + 1) return;\n    gamePositionPtr += 1;\n    try {\n        board.uploadAll(gamePositions[gamePositionPtr]);\n    } catch (e) {\n        console.error(`Could not load position in forwardGame!\\n${e}`);\n    }\n}\n\nconst file = {\n    getStartPosition,\n    saveStart,\n    loadStart,\n    saveGame,\n    backGame,\n    forwardGame,\n};\n\n;// ./src/dom.js\n\n\n\nconst gridNode = document.querySelector(".grid");\nconst buttonsNode = document.querySelector(".buttonContainer");\nconst messageNode = document.querySelector("#message");\nconst descriptionNode = document.querySelector("#description");\n\nlet invalidDisplayed = null;\nlet moveDisplayed = null;\n\nfunction displayBoard(board) {\n    gridNode.innerHTML = "";\n\n    for (const i of sqs.all) {\n        const newCell = document.createElement("div");\n        newCell.classList.add("cell");\n        newCell.classList.add(`row${sqs.rowOf(i)}`);\n        newCell.classList.add(`col${sqs.columnOf(i)}`);\n\n        if (board.hasValue(i)) {\n            newCell.classList.add("value");\n            newCell.innerText = board.getValue(i);\n            newCell.addEventListener("click", () => {\n                const state = getState();\n                state.valueClick(i);\n            });\n            newCell.addEventListener("contextmenu", (e) => {\n                e.preventDefault();\n                const state = getState();\n                state.valueClickRight(i);\n            });\n        } else {\n            newCell.classList.add("notes");\n            for (let j = 1; j <= 9; j++) {\n                const newNote = document.createElement("div");\n                newNote.classList.add("note");\n                newNote.innerText = j;\n                const indicator = board.hasNote(i, j) ? "yes" : "no";\n                newNote.classList.add(indicator);\n                newNote.addEventListener("click", () => {\n                    const state = getState();\n                    if (board.hasNote(i, j)) {\n                        state.presentNoteClick(i, j);\n                    } else {\n                        state.missingNoteClick(i, j);\n                    }\n                });\n                newNote.addEventListener("contextmenu", (e) => {\n                    e.preventDefault();\n                    const state = getState();\n                    if (board.hasNote(i, j)) {\n                        state.presentNoteClickRight(i, j);\n                    } else {\n                        state.missingNoteClickRight(i, j);\n                    }\n                });\n                newCell.appendChild(newNote);\n            }\n        }\n        gridNode.appendChild(newCell);\n    }\n}\n\nfunction displayButtons(buttonTexts) {\n    buttonsNode.innerHTML = "";\n    for (const button of buttonTexts) {\n        const newButton = document.createElement("div");\n        newButton.classList.add("button");\n        newButton.innerText = button;\n        newButton.addEventListener("click", () => {\n            buttonAction[button]();\n        });\n        buttonsNode.appendChild(newButton);\n    }\n}\n\nfunction displayMessage(message) {\n    messageNode.innerText = message;\n}\n\nfunction displayDescription(description) {\n    descriptionNode.innerText = description;\n}\n\nfunction displayMove(move) {\n    if (!move) {\n        return;\n    }\n    for (const sq of move.lineSqs) {\n        gridNode.children[sq].classList.add("move-line");\n    }\n    for (const keyNote of move.keyNotes) {\n        const cellNode = gridNode.children[keyNote.cell];\n        cellNode.children[keyNote.note - 1].classList.add("move-keynote");\n    }\n    for (const deadNote of move.deadNotes) {\n        const cellNode = gridNode.children[deadNote.cell];\n        cellNode.children[deadNote.note - 1].classList.add("move-deadnote");\n    }\n    moveDisplayed = move;\n}\n\nfunction displayMoveLineSqs(move) {\n        if (!move) {\n        return;\n    }\n    for (const sq of move.lineSqs) {\n        gridNode.children[sq].classList.add("move-line");\n    }\n    moveDisplayed = move;\n}\n\nfunction removeMove() {\n    if (!moveDisplayed) {\n        return;\n    }\n    for (const sq of moveDisplayed.lineSqs) {\n        gridNode.children[sq].classList.remove("move-line");\n    }\n    for (const keyNote of moveDisplayed.keyNotes) {\n        const cellNode = gridNode.children[keyNote.cell];\n        cellNode.children[keyNote.note - 1].classList.remove("move-keynote");\n    }\n\n    for (const deadNote of moveDisplayed.deadNotes) {\n        const cellNode = gridNode.children[deadNote.cell];\n        cellNode.children[deadNote.note - 1].classList.remove("move-deadnote");\n    }\n    moveDisplayed = null;\n}\n\nfunction displayInvalid(report) {\n    if (!report) {\n        return;\n    }\n    for (const cell of report.line) {\n        gridNode.children[cell].classList.add("invalid-line");\n    }\n    for (const cell of report.squares) {\n        gridNode.children[cell].classList.add("invalid-square");\n    }\n    invalidDisplayed = report;\n}\n\nfunction removeInvalid() {\n    if (!invalidDisplayed) {\n        return;\n    }\n    for (const cell of invalidDisplayed.line) {\n        gridNode.children[cell].classList.remove("invalid-line");\n    }\n    for (const cell of invalidDisplayed.squares) {\n        gridNode.children[cell].classList.remove("invalid-square");\n    }\n    invalidDisplayed = null;\n}\n\nfunction displayAddNote(i, j) {\n    const noteNode = gridNode.children[i].children[j - 1];\n    noteNode.classList.remove("no");\n    noteNode.classList.add("yes");\n}\n\nfunction displayRemoveNote(i, j) {\n    const noteNode = gridNode.children[i].children[j - 1];\n    noteNode.classList.remove("yes");\n    noteNode.classList.add("no");\n}\n\nconst dom = {\n    displayBoard,\n    displayButtons,\n    displayMessage,\n    displayDescription,\n    displayMove,\n    displayMoveLineSqs,\n    removeMove,\n    displayInvalid,\n    removeInvalid,\n    displayAddNote,\n    displayRemoveNote,\n};\n\n;// ./src/calc/class-Move.js\nclass Move {\n    constructor(type, hint, description, lineSqs, keyNotes, deadNotes) {\n        this.type = type;\n        this.hint = hint;\n        this.description = description;\n        this.lineSqs = lineSqs;\n        this.keyNotes = keyNotes;\n        this.deadNotes = deadNotes;\n    }\n}\n;// ./src/calc/tnq-nakeds.js\n\n\n\n\n\n\n\nfunction naked1(board) {\n    const movesFound = [];\n\n    const nakedSquares = sqs.all.filter((i) => board.noteCount(i) === 1);\n    for (const sq of nakedSquares) {\n        const newMove = new Move(\n            this.name, // `Naked Single`,\n            `Look for a cell with only one possible value`,\n            `This cell has only one note - that must be its value!`,\n            [sq],\n            board.createNoteLabels([sq], bit.allNotes),\n            [],\n        );\n        movesFound.push(newMove);\n    }\n\n    return movesFound;\n}\n\nconst numberWord = { 1: "Single", 2: "Double", 3: "Triple", 4: "Quadruple" };\n\nfunction naked234(board, n) {\n    console.assert(n >= 2 && n <= 4, "Invalid argument to naked234");\n    const movesFound = [];\n\n    for (const house of sqs.houses) {\n        const activeSquares = house.filter((i) => board.hasNoValue(i));\n\n        // To avoid replication between naked and hiddens\n        if (n > Math.floor(activeSquares.length / 2)) {\n        continue;\n        }\n        // could remove Math.floor?\n\n        for (const subsets of cmb.bipartitions(activeSquares, n)) {\n            const [subsetA, subsetB] = subsets;\n            const subsetANotes = board.noteUnion(subsetA);\n            if (bit.count(subsetANotes) > n) {\n                continue;\n            }\n            const subsetBNotes = board.noteUnion(subsetB);\n            if ((subsetBNotes & subsetANotes) === 0) {\n                continue;\n            }\n            const newMove = new Move(\n                `Naked ${numberWord[n]}`,\n                `Look for ${n} cells which can only take ${n} values between them`,\n                `There are only ${n} possible values across ${n} cells so the values cannot be used elsewhere in the house`,\n                house,\n                board.createNoteLabels(subsetA, subsetANotes),\n                board.createNoteLabels(subsetB, subsetANotes),\n            );\n            movesFound.push(newMove);\n        }\n    }\n\n    return movesFound;\n}\n\n;// ./src/calc/tnq-hiddens.js\n\n\n\n\n\n\n\nconst tnq_hiddens_numberWord = { 1: "Single", 2: "Double", 3: "Triple", 4: "Quadruple" };\n\nfunction hidden1234(board, n) {\n    console.assert(n >= 1 && n <= 4, "Invalid argument to hidden1234");\n    const movesFound = [];\n    const hint =\n        n === 1\n            ? "Look for a note which is only in one cell of its house"\n            : `Look for ${n} notes which are in only ${n} cells of the house`;\n    const description =\n        n === 1\n            ? "This value must be in this cell, so no other value is possible here"\n            : `These ${n} values must be in these ${n} cells, so no other values are possible`;\n\n    for (const house of sqs.houses) {\n        const activeSquares = house.filter((i) => board.hasNoValue(i));\n        const len = activeSquares.length;\n\n        // To avoid replication between naked and hiddens\n        if (n > Math.floor((len - 1) / 2)) {\n            continue;\n        }\n        // could remove Math.floor?\n        \n\n        for (const subsets of cmb.bipartitions(activeSquares, len - n)) {\n            const [subsetA, subsetB] = subsets;\n            const subsetANotes = board.noteUnion(subsetA);\n            if (bit.count(subsetANotes) > len - n) {\n                continue;\n            }\n            const subsetBNotes = board.noteUnion(subsetB);\n            if ((subsetBNotes & subsetANotes) === 0) {\n                continue;\n            }\n\n            const newMove = new Move(\n                `Hidden ${tnq_hiddens_numberWord[n]}`,\n                hint,\n                description,\n                house,\n                board.createNoteLabels(subsetB, bit.not(subsetANotes)),\n                board.createNoteLabels(subsetB, subsetANotes),\n            );\n            movesFound.push(newMove);\n        }\n    }\n\n    return movesFound;\n}\n\n;// ./src/calc/tnq-pointing.js\n\n\n\n\n\n\n\nconst pointingTriples = blockAndLineTriples(sqs.rowOf).concat(\n    blockAndLineTriples(sqs.columnOf),\n);\n\nfunction pointing(board) {\n    const movesFound = [];\n    for (const triple of pointingTriples) {\n        const activeBlockAndLine = triple[0].filter((i) => board.hasNoValue(i));\n        const activeBlockOnly = triple[1].filter((i) => board.hasNoValue(i));\n        const activeLineOnly = triple[2].filter((i) => board.hasNoValue(i));\n\n        const blockAndLineNotes = board.noteUnion(activeBlockAndLine);\n        const blockOnlyNotes = board.noteUnion(activeBlockOnly);\n        const lineOnlyNotes = board.noteUnion(activeLineOnly);\n\n        const targetNotes = blockAndLineNotes & lineOnlyNotes & bit.not(blockOnlyNotes);\n        const numTargetNotes = bit.count(targetNotes);\n\n        // exclude 1 target note - this will be spotted by hidden single\n        if (numTargetNotes > 1) {\n            const newMove = new Move(\n                this.name, //`Pointing`,\n                "Look for block notes restricted to a single line",\n                "Block values restricted to a line can be removed from other line cells",\n                triple.flat(),\n                board.createNoteLabels(activeBlockAndLine, targetNotes),\n                board.createNoteLabels(activeLineOnly, targetNotes),\n            );\n            movesFound.push(newMove);\n        }\n    }\n    return movesFound;\n}\n\nfunction claiming(board) {\n    const movesFound = [];\n    for (const triple of pointingTriples) {\n        const activeBlockAndLine = triple[0].filter((i) => board.hasNoValue(i));\n        const activeBlockOnly = triple[1].filter((i) => board.hasNoValue(i));\n        const activeLineOnly = triple[2].filter((i) => board.hasNoValue(i));\n\n        const blockAndLineNotes = board.noteUnion(activeBlockAndLine);\n        const blockOnlyNotes = board.noteUnion(activeBlockOnly);\n        const lineOnlyNotes = board.noteUnion(activeLineOnly);\n\n        const targetNotes = blockAndLineNotes & bit.not(lineOnlyNotes) & blockOnlyNotes;\n        const numTargetNotes = bit.count(targetNotes);\n\n        // exclude 1 target note - this will be spotted by hidden single\n        if (numTargetNotes > 1) {\n            const newMove = new Move(\n                this.name, //`Claiming`,\n                "Look for line notes restricted to a single block",\n                "Line values restricted to a block can be removed from other block cells",\n                triple.flat(),\n                board.createNoteLabels(activeBlockAndLine, targetNotes),\n                board.createNoteLabels(activeBlockOnly, targetNotes),\n            );\n            movesFound.push(newMove);\n        }\n    }\n    return movesFound;\n}\n\n// triple: [block&line], [block only], [line only]\nfunction blockAndLineTriples(lineOf) {\n    const triples = [];\n    for (let b = 0; b < 9; b++) {\n        for (let l = 0; l < 9; l++) {\n            const triple = [[], [], []];\n            for (const sq of sqs.all) {\n                const sqLine = lineOf(sq);\n                const sqBlock = sqs.blockOf(sq);\n                if (sqBlock === b && sqLine === l) {\n                    triple[0].push(sq);\n                } else if (sqBlock === b) {\n                    triple[1].push(sq);\n                } else if (sqLine === l) {\n                    triple[2].push(sq);\n                }\n            }\n            if (triple[0].length > 0) {\n                triples.push(triple);\n            }\n        }\n    }\n    return triples;\n}\n\n;// ./src/calc/mod-calc.js\n\n\n\n\nclass Strategy {\n    constructor(name, difficulty, findMoves) {\n        this.name = name;\n        this.difficulty = difficulty;\n        this.findMoves = findMoves;\n    }\n}\n\nconst strategies = [\n    new Strategy("Naked Single", 0, naked1),\n    new Strategy("Hidden Single", 0, (b) => hidden1234.call(undefined, b, 1)), \n    new Strategy("Naked Double", 1, (b) => naked234(b, 2)),\n    new Strategy("Hidden Double", 1, (b) => hidden1234(b, 2)), \n    new Strategy("Naked Triple", 1, (b) => naked234(b, 3)),\n    new Strategy("Hidden Triple", 2, (b) => hidden1234(b, 3)),\n    new Strategy("Naked Quadruple", 2, (b) => naked234(b, 4)),\n    new Strategy("Hidden Quadruple", 2, (b) => hidden1234(b, 4)),\n    new Strategy("Pointing", 2, pointing),\n    new Strategy("Claiming", 2, claiming),\n];\n\n\nfunction findMove(board) {\n    console.time("findMove");\n    let result = null;\n    for (const strategy of strategies) {\n        console.time(`  ${strategy.name}`)\n        const moves = strategy.findMoves(board);\n        console.timeEnd(`  ${strategy.name}`)\n        if (moves.length > 0) {\n            moves.sort((a, b) => {\n                return b.deadNotes.length - a.deadNotes.length;\n            });\n            result = moves[0];\n            break;\n        }\n    }\n    console.timeEnd("findMove");\n    return result;\n}\n\nconst calc = { findMove };\n;// ./src/control.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\nconst board = new Board();\nlet state;\nlet move;\n\n// let move = calc.findMove(board);\n\nfunction getState() {\n    return state;\n}\n\nfunction start() {\n    board.resetAll();\n    state = new SetupMode();\n}\n\nfunction startDefault() {\n    board.resetAll();\n    const squares = [\n        0, 1, 2, 5, 12, 14, 16, 18, 23, 29, 31, 33, 34, 35, 36, 40, 41, 47, 52, 57, 59,\n        62, 71, 76, 78, 80,\n    ];\n    const values = [\n        6, 8, 7, 4, 3, 9, 7, 9, 8, 5, 3, 1, 6, 7, 4, 7, 1, 3, 8, 2, 7, 3, 5, 9, 8, 4,\n    ];\n    squares.forEach((s, i) => board.setValue(s, values[i]));\n    state = new SetupMode();\n}\n\nconst buttonAction = {\n    reset() {\n        if (confirm("Reset back to empty board - are you sure?")) {\n            start();\n        }\n    },\n    restart() {\n        if (confirm("Return to start position - are you sure?\\nAll progress will be lost")) {\n            file.loadStart(board);\n            state = new SetupMode();\n        }\n    },\n    done() {\n        file.saveStart(board);\n        state = new GameMode();\n    },\n    forward() {\n        file.forwardGame(board);\n        dom.displayBoard(board);\n        state = new GameMode(); // better to display DOM?\n    },\n    back() {\n        file.backGame(board);\n        dom.displayBoard(board);\n        state = new GameMode();\n    },\n    recalc() {\n            board.recalculateAllNotes();\n            dom.displayBoard(board);\n            file.saveGame(board);\n    },\n    clue() {\n        move = calc.findMove(board);\n        if (move) {\n            state = new HintMode(false);\n        }\n    },\n    show() {\n        state = new HintMode(true);\n    },\n    hide() {\n        dom.removeMove();\n        state = new GameMode();\n    },\n};\n\nconst action = {\n    removeNote(i, j) {\n        board.removeNote(i, j);\n        dom.displayRemoveNote(i, j);\n        file.saveGame(board);\n    },\n    reinstateMissingNote(i, j) {\n        if (sqs.peers[i].every((sq) => board.getValue(sq) !== j)) {\n            board.addNote(i, j);\n            dom.displayAddNote(i, j);\n            file.saveGame(board);\n        }\n    },\n    setValue(i, j) {\n        board.setValue(i, j);\n        dom.displayBoard(board);\n        file.saveGame(board);\n        state = board.isComplete() ? new EndMode() : new GameMode();\n    },\n    undoValue(i) {\n        board.undoValue(i);\n        dom.displayBoard(board);\n        file.saveGame(board);\n        state = new GameMode();\n    },\n    setValueOrRemoveNote(i, j) {\n        if (board.noteCount(i) === 1) {\n            this.setValue(i, j);\n        } else {\n            this.removeNote(i, j);\n        }\n    },\n};\n\nclass EndMode {\n    constructor(bool) {\n        dom.displayButtons(["back", "restart", "reset"]);\n        dom.displayMessage("Congratulations!");\n        dom.displayDescription("");\n    }\n\n    valueClick(i) {\n        if (file.getStartPosition()[i]) return;\n        action.undoValue(i);\n        state = new GameMode();\n    }\n\n    valueClickRight(i) {\n        this.valueClick(i);\n    }\n}\n\nclass HintMode {\n    constructor(bool) {\n        if (bool) {\n            dom.displayMove(move);\n            dom.displayButtons(["hide"]);\n            dom.displayMessage(move.type);\n            dom.displayDescription(move.description);\n        } else {\n            if (move.type !== "Naked Single") {\n                dom.displayMoveLineSqs(move);\n            }\n            dom.displayButtons(["show", "hide"]);\n            dom.displayDescription(move.hint);\n            dom.displayMessage(move.type);\n        }\n    }\n\n    valueClick(i) {\n        if (file.getStartPosition()[i]) return;\n        action.undoValue(i);\n    }\n\n    valueClickRight(i) {\n        this.valueClick(i);\n    }\n\n    presentNoteClick(i, j) {\n        action.setValue(i, j);\n    }\n\n    presentNoteClickRight(i, j) {\n        action.setValueOrRemoveNote(i, j);\n        if (move.deadNotes.every((e) => !board.hasNote(e.cell, e.note))) {\n            dom.removeMove();\n            state = new GameMode();\n        }\n    }\n\n    missingNoteClick(i, j) {\n        action.reinstateMissingNote(i, j);\n    }\n\n    missingNoteClickRight(i, j) {\n        this.missingNoteClick(i, j);\n    }\n}\n\nclass GameMode {\n    constructor() {\n        dom.displayButtons(["clue", "recalc", "back", "forward", "restart", "reset"]);\n        dom.displayMessage("Get solving!");\n        dom.displayDescription("Use both mouse buttons to toggle values and notes");\n    }\n\n    valueClick(i) {\n        if (file.getStartPosition()[i]) return;\n        action.undoValue(i);\n    }\n\n    valueClickRight(i) {\n        this.valueClick(i);\n    }\n\n    presentNoteClick(i, j) {\n        action.setValue(i, j);\n    }\n\n    presentNoteClickRight(i, j) {\n        action.setValueOrRemoveNote(i, j);\n    }\n\n    missingNoteClick(i, j) {\n        action.reinstateMissingNote(i, j);\n    }\n\n    missingNoteClickRight(i, j) {\n        action.reinstateMissingNote(i, j);\n    }\n}\n\nclass SetupMode {\n    constructor() {\n        dom.displayBoard(board);\n        dom.displayButtons(["done", "reset"]);\n        dom.displayMessage("Create start position");\n        dom.displayDescription("Click done when ready");\n    }\n\n    valueClick(i) {\n        board.undoValue(i);\n        dom.displayBoard(board);\n    }\n\n    valueClickRight(i) {\n        this.valueClick(i);\n    }\n\n    presentNoteClick(i, j) {\n        board.setValue(i, j);\n        dom.displayBoard(board);\n        this.#checkIfPositionInvalid();\n    }\n\n    presentNoteClickRight(i, j) {\n        this.presentNoteClick(i, j);\n    }\n\n    missingNoteClick(i, j) {\n        return;\n    }\n\n    missingNoteClickRight(i, j) {\n        return;\n    }\n\n    #checkIfPositionInvalid() {\n        const invalidSubset = board.findInvalidSubset();\n        if (invalidSubset) {\n            state = new InvalidMode(invalidSubset);\n        }\n    }\n}\n\nclass InvalidMode {\n    constructor(invalidSubset) {\n        const standardDescription =\n            invalidSubset.line.length === 0\n                ? "Cell has no notes available - undo or reset"\n                : "Highlighted cells have insufficient notes available - undo or reset";\n        dom.displayInvalid(invalidSubset);\n        dom.displayButtons(["reset"]);\n        dom.displayMessage("Invalid position");\n        dom.displayDescription(standardDescription);\n    }\n\n    valueClick(i) {\n        board.undoValue(i);\n        dom.displayBoard(board);\n        this.#checkIfPositionValid();\n    }\n\n    valueClickRight(i) {\n        this.valueClick(i);\n    }\n\n    presentNoteClick(i, j) {\n        return;\n    }\n\n    presentNoteClickRight(i, j) {\n        return;\n    }\n\n    missingNoteClick(i, j) {\n        return;\n    }\n\n    missingNoteClickRight(i, j) {\n        return;\n    }\n\n    #checkIfPositionValid() {\n        dom.removeInvalid();\n        const invalidSubset = board.findInvalidSubset();\n        if (invalidSubset) {\n            state = new InvalidMode(invalidSubset);\n        } else {\n            state = new SetupMode();\n        }\n    }\n}\n\n;// ./src/index.js\n\n\n// eslint-disable-next-line no-unused-vars\n\n\n// start();\nstartDefault();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///968\n')}},__webpack_module_cache__={};function __webpack_require__(I){var n=__webpack_module_cache__[I];if(void 0!==n)return n.exports;var g=__webpack_module_cache__[I]={id:I,exports:{}};return __webpack_modules__[I](g,g.exports,__webpack_require__),g.exports}__webpack_require__.n=I=>{var n=I&&I.__esModule?()=>I.default:()=>I;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(I,n)=>{for(var g in n)__webpack_require__.o(n,g)&&!__webpack_require__.o(I,g)&&Object.defineProperty(I,g,{enumerable:!0,get:n[g]})},__webpack_require__.o=(I,n)=>Object.prototype.hasOwnProperty.call(I,n),__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(968)})();