(()=>{"use strict";var __webpack_modules__={56:(module,__unused_webpack_exports,__webpack_require__)=>{eval('\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n  if (nonce) {\n    styleElement.setAttribute("nonce", nonce);\n  }\n}\nmodule.exports = setAttributesWithoutAttributes;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTYuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLGNBQWMsS0FBd0MsR0FBRyxzQkFBaUIsR0FBRyxDQUFJO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdWRva3UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanM/ZGRjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///56\n')},72:module=>{eval('\n\nvar stylesInDOM = [];\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n}\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = "".concat(id, " ").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n    identifiers.push(identifier);\n  }\n  return identifiers;\n}\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n  return updater;\n}\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n    var newLastIdentifiers = modulesToDom(newList, options);\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n      var _index = getIndexByIdentifier(_identifier);\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdCQUF3QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixpQkFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0QkFBNEI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQiw2QkFBNkI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdWRva3UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanM/MmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gdXBkYXRlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///72\n')},113:module=>{eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\nmodule.exports = styleTagTransform;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vkb2t1Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanM/MWRkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///113\n")},208:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `body {\n    box-sizing: border-box;\n    background-color: whitesmoke;\n    --grid-color: whitesmoke;\n    --grid-width: clamp(45rem, 90vw, 80vh);\n    --value-fontsize: clamp(3rem, 6vw, 6vh);\n    --note-fontsize: clamp(1rem, 2vw, 2vh);\n}\n\n.grid {\n    font-family:\n        ui-monospace, "Cascadia Code", "Source Code Pro", Menlo, Consolas,\n        "DejaVu Sans Mono", monospace;\n    background-color: var(--grid-color);\n    font-weight: normal;\n    border: black 2px solid;\n    width: var(--grid-width);\n    height: var(--grid-width);\n    margin: auto;\n    display: grid;\n    grid-template-columns: repeat(9, 1fr);\n    grid-template-rows: repeat(9, 1fr);\n    cursor: pointer;\n    user-select: none;\n}\n\n.cell {\n    border: black 1px solid;\n}\n\n.cell.row0,\n.cell.row3,\n.cell.row6 {\n    border-top: black 2px solid;\n}\n\n.cell.row2,\n.cell.row5,\n.cell.row8 {\n    border-bottom: black 2px solid;\n}\n\n.cell.col0,\n.cell.col3,\n.cell.col6 {\n    border-left: black 2px solid;\n}\n\n.cell.col2,\n.cell.col5,\n.cell.col8 {\n    border-right: black 2px solid;\n}\n\n.cell.value {\n    font-size: var(--value-fontsize);\n    display: grid;\n    place-content: center;\n}\n\n.cell.notes {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: repeat(3, 1fr);\n    font-size: var(--note-fontsize);\n}\n\n.cell.move-line {\n    background: #c0c0c0;\n}\n\n.cell.invalid-line {\n    background-color: #ddd;\n}\n\n.cell.invalid-square {\n    background-color: yellow;\n}\n\n.note {\n    display: grid;\n    place-content: center;\n    color: #505050;\n    border: transparent 2px solid;\n    border-radius: 50%;\n}\n\n.note.yes:hover {\n    border: blue 2px solid;\n    border-radius: 50%;\n}\n\n.note.no {\n    opacity: 0;\n}\n\n.note.no:hover {\n    opacity: 0.3;\n}\n\n.note.move-keynote {\n    color: blue;\n}\n\n.note.move-deadnote {\n    color: red;\n}\n\n.buttonContainer {\n    display: flex;\n    justify-content: space-evenly;\n    margin: 5px 0;\n}\n\n.button {\n    border: 1px black solid;\n    cursor: pointer;\n    user-select: none;\n    width: 6em;\n    text-align: center;\n}\n\n.messageContainer {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    user-select: none;\n}\n`, "",{"version":3,"sources":["webpack://./src/style.css"],"names":[],"mappings":"AAAA;IACI,sBAAsB;IACtB,4BAA4B;IAC5B,wBAAwB;IACxB,sCAAsC;IACtC,uCAAuC;IACvC,sCAAsC;AAC1C;;AAEA;IACI;;qCAEiC;IACjC,mCAAmC;IACnC,mBAAmB;IACnB,uBAAuB;IACvB,wBAAwB;IACxB,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,qCAAqC;IACrC,kCAAkC;IAClC,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;;;IAGI,2BAA2B;AAC/B;;AAEA;;;IAGI,8BAA8B;AAClC;;AAEA;;;IAGI,4BAA4B;AAChC;;AAEA;;;IAGI,6BAA6B;AACjC;;AAEA;IACI,gCAAgC;IAChC,aAAa;IACb,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,qCAAqC;IACrC,kCAAkC;IAClC,+BAA+B;AACnC;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,cAAc;IACd,6BAA6B;IAC7B,kBAAkB;AACtB;;AAEA;IACI,sBAAsB;IACtB,kBAAkB;AACtB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,aAAa;AACjB;;AAEA;IACI,uBAAuB;IACvB,eAAe;IACf,iBAAiB;IACjB,UAAU;IACV,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,iBAAiB;AACrB","sourcesContent":["body {\\n    box-sizing: border-box;\\n    background-color: whitesmoke;\\n    --grid-color: whitesmoke;\\n    --grid-width: clamp(45rem, 90vw, 80vh);\\n    --value-fontsize: clamp(3rem, 6vw, 6vh);\\n    --note-fontsize: clamp(1rem, 2vw, 2vh);\\n}\\n\\n.grid {\\n    font-family:\\n        ui-monospace, \\"Cascadia Code\\", \\"Source Code Pro\\", Menlo, Consolas,\\n        \\"DejaVu Sans Mono\\", monospace;\\n    background-color: var(--grid-color);\\n    font-weight: normal;\\n    border: black 2px solid;\\n    width: var(--grid-width);\\n    height: var(--grid-width);\\n    margin: auto;\\n    display: grid;\\n    grid-template-columns: repeat(9, 1fr);\\n    grid-template-rows: repeat(9, 1fr);\\n    cursor: pointer;\\n    user-select: none;\\n}\\n\\n.cell {\\n    border: black 1px solid;\\n}\\n\\n.cell.row0,\\n.cell.row3,\\n.cell.row6 {\\n    border-top: black 2px solid;\\n}\\n\\n.cell.row2,\\n.cell.row5,\\n.cell.row8 {\\n    border-bottom: black 2px solid;\\n}\\n\\n.cell.col0,\\n.cell.col3,\\n.cell.col6 {\\n    border-left: black 2px solid;\\n}\\n\\n.cell.col2,\\n.cell.col5,\\n.cell.col8 {\\n    border-right: black 2px solid;\\n}\\n\\n.cell.value {\\n    font-size: var(--value-fontsize);\\n    display: grid;\\n    place-content: center;\\n}\\n\\n.cell.notes {\\n    display: grid;\\n    grid-template-columns: repeat(3, 1fr);\\n    grid-template-rows: repeat(3, 1fr);\\n    font-size: var(--note-fontsize);\\n}\\n\\n.cell.move-line {\\n    background: #c0c0c0;\\n}\\n\\n.cell.invalid-line {\\n    background-color: #ddd;\\n}\\n\\n.cell.invalid-square {\\n    background-color: yellow;\\n}\\n\\n.note {\\n    display: grid;\\n    place-content: center;\\n    color: #505050;\\n    border: transparent 2px solid;\\n    border-radius: 50%;\\n}\\n\\n.note.yes:hover {\\n    border: blue 2px solid;\\n    border-radius: 50%;\\n}\\n\\n.note.no {\\n    opacity: 0;\\n}\\n\\n.note.no:hover {\\n    opacity: 0.3;\\n}\\n\\n.note.move-keynote {\\n    color: blue;\\n}\\n\\n.note.move-deadnote {\\n    color: red;\\n}\\n\\n.buttonContainer {\\n    display: flex;\\n    justify-content: space-evenly;\\n    margin: 5px 0;\\n}\\n\\n.button {\\n    border: 1px black solid;\\n    cursor: pointer;\\n    user-select: none;\\n    width: 6em;\\n    text-align: center;\\n}\\n\\n.messageContainer {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    user-select: none;\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///208\n')},314:module=>{eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = [];\n\n  // return the list of modules as css string\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = "";\n      var needLayer = typeof item[5] !== "undefined";\n      if (item[4]) {\n        content += "@supports (".concat(item[4], ") {");\n      }\n      if (item[2]) {\n        content += "@media ".concat(item[2], " {");\n      }\n      if (needLayer) {\n        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");\n      }\n      content += cssWithMappingToString(item);\n      if (needLayer) {\n        content += "}";\n      }\n      if (item[2]) {\n        content += "}";\n      }\n      if (item[4]) {\n        content += "}";\n      }\n      return content;\n    }).join("");\n  };\n\n  // import a list of modules into the list\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === "string") {\n      modules = [[null, modules, undefined]];\n    }\n    var alreadyImportedModules = {};\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n      if (typeof layer !== "undefined") {\n        if (typeof item[5] === "undefined") {\n          item[5] = layer;\n        } else {\n          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");\n          item[5] = layer;\n        }\n      }\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");\n          item[2] = media;\n        }\n      }\n      if (supports) {\n        if (!item[4]) {\n          item[4] = "".concat(supports);\n        } else {\n          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");\n          item[4] = supports;\n        }\n      }\n      list.push(item);\n    }\n  };\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzE0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixpQkFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHFCQUFxQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzRkFBc0YscUJBQXFCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixpREFBaUQscUJBQXFCO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixzREFBc0QscUJBQXFCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdWRva3UvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzPzI0ZmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///314\n')},354:module=>{eval('\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n  if (!cssMapping) {\n    return content;\n  }\n  if (typeof btoa === "function") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    return [content].concat([sourceMapping]).join("\\n");\n  }\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzU0LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vkb2t1Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanM/YWYxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///354\n')},540:module=>{eval('\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement("style");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\nmodule.exports = insertStyleElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTQwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdWRva3UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanM/ZGU2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///540\n')},659:module=>{eval('\n\nvar memo = {};\n\n/* istanbul ignore next  */\nfunction getTarget(target) {\n  if (typeof memo[target] === "undefined") {\n    var styleTarget = document.querySelector(target);\n\n    // Special case to return head of iframe instead of iframe itself\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n    memo[target] = styleTarget;\n  }\n  return memo[target];\n}\n\n/* istanbul ignore next  */\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n  if (!target) {\n    throw new Error("Couldn\'t find a style target. This probably means that the value for the \'insert\' parameter is invalid.");\n  }\n  target.appendChild(style);\n}\nmodule.exports = insertBySelector;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjU5LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3N1ZG9rdS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanM/YjIxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///659\n')},760:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(72);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(56);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/style.css\nvar style = __webpack_require__(208);\n;// ./src/style.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\noptions.insert = insertBySelector_default().bind(null, "head");\noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(style/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const src_style = (style/* default */.A && style/* default */.A.locals ? style/* default */.A.locals : undefined);\n\n;// ./src/mods/mod-sqs.js\nconsole.time("Sqs setup")\n\nconst mod_sqs_all = [...Array(81).keys()];\n\nfunction rowOf(c) {\n    return Math.floor(c / 9);\n}\n\nfunction columnOf(c) {\n    return c % 9;\n}\n\nfunction blockOf(c) {\n    return 3 * Math.floor(rowOf(c) / 3) + Math.floor(columnOf(c) / 3);\n}\n\nfunction sameRow(c1, c2) {\n    return rowOf(c1) === rowOf(c2);\n}\n\nfunction sameColumn(c1, c2) {\n    return columnOf(c1) === columnOf(c2);\n}\n\nfunction sameBlock(c1, c2) {\n    return blockOf(c1) === blockOf(c2);\n}\n\nfunction arePeers(c1, c2) {\n    if (sameRow(c1, c2) || sameColumn(c1, c2) || sameBlock(c1, c2)) {\n        return true;\n    }\n    return false;\n}\n\nfunction indexFromRowColumn(r, c) {\n    return 9 * r + c;\n}\n\nconst rows = [];\nfor (let r = 0; r < 9; r++) {\n    const currentLine = [];\n    for (let c = 0; c < 9; c++) {\n        currentLine.push(indexFromRowColumn(r, c));\n    }\n    rows.push(currentLine);\n}\n\nconst columns = [];\nfor (let c = 0; c < 9; c++) {\n    const currentLine = [];\n    for (let r = 0; r < 9; r++) {\n        currentLine.push(indexFromRowColumn(r, c));\n    }\n    columns.push(currentLine);\n}\n\nconst blocks = [];\nfor (let r = 0; r < 9; r += 3) {\n    for (let c = 0; c < 9; c += 3) {\n        blocks.push(createBlockArray(r, c));\n    }\n}\n\nfunction createBlockArray(startRow, startColumn) {\n    const block = [];\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n            block.push(indexFromRowColumn(startRow + i, startColumn + j));\n        }\n    }\n    return block;\n}\n\nconst houses = rows.concat(columns).concat(blocks);\n\nconst peers = [];\nmod_sqs_all.forEach((i) => {\n    const currentPeers = [];\n    mod_sqs_all.forEach((j) => {\n        if (j !== i && arePeers(i, j)) {\n            currentPeers.push(j);\n        }\n    });\n    peers.push(currentPeers);\n});\n\n// add peersOfpeers?\n\nconst sqs = {\n    rowOf,\n    columnOf,\n    blockOf,\n    arePeers,\n    peers,\n    rows,\n    columns,\n    blocks,\n    houses,\n    all: mod_sqs_all,\n};\n\nconsole.timeEnd("Sqs setup")\n;// ./src/mods/mod-bit.js\nconst allNotes = (1 << 9) - 1;\nconst positions = [0, 1, 2, 3, 4, 5, 6, 7, 8];\nconst notePositions = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfunction nth(bit) {\n    return 1 << (bit - 1);\n}\n\nfunction has(num, bit) {\n    return (num & (1 << (bit - 1))) !== 0;\n}\n\nfunction add(num, bit) {\n    return num | (1 << (bit - 1));\n}\n\nfunction remove(num, bit) {\n    return num & not(1 << (bit - 1));\n}\n\nfunction count(num) {\n    let count = 0;\n    while (num) {\n        count++;\n        num &= num - 1;\n    }\n    return count;\n}\n\nfunction not(num) {\n    return allNotes ^ num;\n}\n\nfunction union(numbers) {\n    return numbers.reduce((acc, curr) => acc | curr, 0);\n}\n\nfunction intersection(numbers) {\n    return numbers.reduce((acc, curr) => acc & curr, not(0));\n}\n\nfunction onePositionsFromZero(n) {\n    return positions.filter((e) => ((1 << e) & n) !== 0);\n}\n\nfunction onePositionsNotes(n) {\n    return notePositions.filter((e) => ((1 << (e - 1)) & n) !== 0);\n}\n\nconst bit = {\n    allNotes,\n    nth,\n    has,\n    add,\n    remove,\n    count,\n    not,\n    union,\n    intersection,\n    onePositionsFromZero,\n    onePositionsNotes,\n};\n\n;// ./src/mods/mod-cmb.js\nconsole.time("Cmb setup");\n\n\nfunction bipartitions(set, k) {\n    const ans = [];\n    for (const comb of bipartitionsNN[set.length][k]) {\n        const subset = comb[0].map((e) => set[e]);\n        const subsetComp = comb[1].map((e) => set[e]);\n        ans.push([subset, subsetComp]);\n    }\n    return ans;\n}\n\nconst bipartitionsNN = [];\nfor (let n = 0; n < 10; n++) {\n    bipartitionsNN.push(BipartitionsOfNaturalNumbers(n));\n}\n\nfunction BipartitionsOfNaturalNumbers(n) {\n    const partitions = [...Array(10)].map(() => []);\n\n    for (let m = 0; m < 1 << n; m++) {\n        const subsetA = [];\n        const subsetB = [];\n        for (let i = 0; i < n; i++) {\n            if (m & (1 << i)) {\n                subsetA.push(i);\n            } else {\n                subsetB.push(i);\n            }\n        }\n        partitions[subsetA.length].push([subsetA, subsetB]);\n    }\n    return partitions;\n}\n\nconst cmb = { bipartitions };\n\nconsole.timeEnd("Cmb setup");\n\n;// ./src/class-Board.js\n\n\n\n\nclass Cell {\n    constructor() {\n        this.value = null;\n        this.notes = bit.allNotes;\n    }\n}\n\nclass NoteLabel {\n    constructor(cellNum, noteNum) {\n        this.cell = cellNum;\n        this.note = noteNum;\n    }\n}\n\nclass InvalidReport {\n    constructor(line, squares) {\n        this.line = line;\n        this.squares = squares;\n    }\n}\n\nclass Board {\n    #cells;\n\n    constructor() {\n        this.#cells = Array(81);\n        sqs.all.forEach((i) => (this.#cells[i] = new Cell()));\n    }\n\n    setNotesOnly(sq, newNotes) {\n        this.#cells[sq].notes = newNotes;\n    }\n\n    getNotes(sq) {\n        return this.#cells[sq].notes;\n    }\n\n    addNote(sq, n) {\n        this.setNotesOnly(sq, bit.add(this.getNotes(sq), n));\n    }\n\n    removeNote(sq, n) {\n        this.setNotesOnly(sq, bit.remove(this.getNotes(sq), n));\n    }\n\n    hasNote(sq, n) {\n        return bit.has(this.getNotes(sq), n);\n    }\n\n    noteCount(sq) {\n        return bit.count(this.getNotes(sq));\n    }\n\n    resetNotes(sq) {\n        this.setNotesOnly(sq, bit.allNotes);\n    }\n\n    setValueOnly(sq, newValue) {\n        this.#cells[sq].value = newValue;\n    }\n\n    getValue(sq) {\n        return this.#cells[sq].value;\n    }\n\n    hasValue(sq) {\n        return this.getValue(sq) !== null;\n    }\n\n    hasNoValue(sq) {\n        return this.getValue(sq) === null;\n    }\n\n    resetCell(sq) {\n        this.setValueOnly(sq, null);\n        this.resetNotes(sq);\n    }\n\n    setValue(sq, value) {\n        this.setValueOnly(sq, value);\n        this.setNotesOnly(sq, 0);\n        this.updateNotesAfterSetValue(sq, value);\n    }\n\n    undoValue(sq) {\n        const value = this.getValue(sq);\n        this.resetCell(sq);\n        this.updateNotesAfterUndoValue(sq, value);\n    }\n\n    isComplete() {\n        return sqs.all.every((i) => this.hasValue(i));\n    }\n    \n    cloneValues() {\n        return sqs.all.map((i) => this.getValue(i));\n    }    \n\n    uploadValues(newValues) {\n        this.resetAll();\n        newValues.forEach((v,i) => this.setValueOnly(i,v));\n        this.recalculateAllNotes();\n    }\n    \n    resetAll() {\n        sqs.all.forEach((i) => this.resetCell(i));\n    }\n\n    cloneAll() {\n        const boardClone = new Board();\n        for (const i of sqs.all) {\n            boardClone.setValueOnly(i, this.getValue(i));\n            boardClone.setNotesOnly(i, this.getNotes(i));\n        }\n        return boardClone;\n    }\n\n    uploadAll(newBoard) {\n        for (const i of sqs.all) {\n            this.setValueOnly(i, newBoard.getValue(i));\n            this.setNotesOnly(i, newBoard.getNotes(i));\n        }\n    }\n\n    noteUnion(squares) {\n        return bit.union(squares.map((i) => this.getNotes(i)));\n    }\n\n    noteIntersection(squares) {\n        return bit.intersection(squares.map((i) => this.getNotes(i)));\n    }\n\n    updateNotesAfterSetValue(sq, value) {\n        sqs.peers[sq].forEach((i) => this.removeNote(i, value));\n    }\n\n    updateNotesAfterUndoValue(sq, undoValue) {\n        for (const i of sqs.peers[sq]) {\n            if (this.hasValue(i)) {\n                this.removeNote(sq, this.getValue(i));\n            } else {\n                if (sqs.peers[i].every((j) => this.getValue(j) !== undoValue)) {\n                    this.addNote(i, undoValue);\n                }\n            }\n        }\n    }\n\n    recalculateAllNotes() {\n        console.time("recalculateAllNotes");\n        sqs.all.filter((i) => this.hasNoValue(i)).forEach((i) => this.resetNotes(i));\n        const valueSquares = sqs.all.filter((i) => this.hasValue(i));\n        valueSquares.forEach((i) => this.updateNotesAfterSetValue(i, this.getValue(i)));\n        console.timeEnd("recalculateAllNotes");\n    }\n\n    createNoteLabels(targetSqs, notesToMatch) {\n        const noteLabels = [];\n        for (const sq of targetSqs) {\n            const hitNotes = this.getNotes(sq) & notesToMatch;\n            const positions = bit.onePositionsNotes(hitNotes);\n            positions.forEach((j) => noteLabels.push(new NoteLabel(sq, j)));\n        }\n        return noteLabels;\n    }\n\n    findInvalidSubset() {\n        console.time("findInvalidSubset");\n        for (const sq of sqs.all.filter((sq) => this.hasNoValue(sq))) {\n            if (this.getNotes(sq) === 0) {\n                return new InvalidReport([], [sq]);\n            }\n        }\n        for (let subsetSize = 2; subsetSize < 9; subsetSize++) {\n            for (const line of sqs.houses) {\n                const activeSquares = line.filter((sq) => this.hasNoValue(sq));\n                for (const subsets of cmb.bipartitions(activeSquares, subsetSize)) {\n                    const subsetSquares = subsets[0];\n                    const subsetNotes = this.noteUnion(subsetSquares);\n                    if (bit.count(subsetNotes) < subsetSize) {\n                        console.timeEnd("findInvalidSubset");\n                        return new InvalidReport(line, subsetSquares);\n                    }\n                }\n            }\n        }\n        console.timeEnd("findInvalidSubset");\n        return null;\n    }\n}\n\n;// ./src/mods/mod-file.js\nconst MaxNumberSavedGames = 100;\nlet startPosition;\nlet gamePositionPtr;\nconst gamePositions = [];\n\nfunction getStartPosition() {\n    return startPosition;\n}\n\nfunction saveStart(board) {\n    startPosition = board.cloneValues();\n    gamePositions.length = 0;\n    gamePositionPtr = -1;\n    saveGame(board);\n}\n\nfunction loadStart(board) {\n    try {\n        board.uploadValues(startPosition);\n    } catch (e) {\n        console.error(`Could not load start position!\\n${e}`);\n    }\n}\n\nfunction saveGame(board) {\n    while (gamePositions.length >= MaxNumberSavedGames) {\n        gamePositions.shift();\n        gamePositionPtr -= 1;\n    }\n    gamePositions.length = gamePositionPtr + 1;\n    gamePositions.push(board.cloneAll());\n    gamePositionPtr += 1;\n}\n\nfunction backGame(board) {\n    if (gamePositionPtr === 0) return;\n    gamePositionPtr -= 1;\n    try {\n        board.uploadAll(gamePositions[gamePositionPtr]);\n    } catch (e) {\n        console.error(`Could not load position in backGame!\\n${e}`);\n    }\n}\n\nfunction forwardGame(board) {\n    if (gamePositions.length === gamePositionPtr + 1) return;\n    gamePositionPtr += 1;\n    try {\n        board.uploadAll(gamePositions[gamePositionPtr]);\n    } catch (e) {\n        console.error(`Could not load position in forwardGame!\\n${e}`);\n    }\n}\n\nconst file = {\n    getStartPosition,\n    saveStart,\n    loadStart,\n    saveGame,\n    backGame,\n    forwardGame,\n};\n\n;// ./src/dom.js\n\n\n\nconst gridNode = document.querySelector(".grid");\nconst buttonsNode = document.querySelector(".buttonContainer");\nconst messageNode = document.querySelector("#message");\nconst descriptionNode = document.querySelector("#description");\n\nlet invalidDisplayed = null;\nlet moveDisplayed = null;\n\nfunction displayBoard(board) {\n    gridNode.innerHTML = "";\n\n    for (const i of sqs.all) {\n        const newCell = document.createElement("div");\n        newCell.classList.add("cell");\n        newCell.classList.add(`row${sqs.rowOf(i)}`);\n        newCell.classList.add(`col${sqs.columnOf(i)}`);\n\n        if (board.hasValue(i)) {\n            newCell.classList.add("value");\n            newCell.innerText = board.getValue(i);\n            newCell.addEventListener("click", () => {\n                const state = getState();\n                state.valueClick(i);\n            });\n            newCell.addEventListener("contextmenu", (e) => {\n                e.preventDefault();\n                const state = getState();\n                state.valueClickRight(i);\n            });\n        } else {\n            newCell.classList.add("notes");\n            for (let j = 1; j <= 9; j++) {\n                const newNote = document.createElement("div");\n                newNote.classList.add("note");\n                newNote.innerText = j;\n                const indicator = board.hasNote(i, j) ? "yes" : "no";\n                newNote.classList.add(indicator);\n                newNote.addEventListener("click", () => {\n                    const state = getState();\n                    if (board.hasNote(i, j)) {\n                        state.presentNoteClick(i, j);\n                    } else {\n                        state.missingNoteClick(i, j);\n                    }\n                });\n                newNote.addEventListener("contextmenu", (e) => {\n                    e.preventDefault();\n                    const state = getState();\n                    if (board.hasNote(i, j)) {\n                        state.presentNoteClickRight(i, j);\n                    } else {\n                        state.missingNoteClickRight(i, j);\n                    }\n                });\n                newCell.appendChild(newNote);\n            }\n        }\n        gridNode.appendChild(newCell);\n    }\n}\n\nfunction displayButtons(buttonTexts) {\n    buttonsNode.innerHTML = "";\n    for (const button of buttonTexts) {\n        const newButton = document.createElement("div");\n        newButton.classList.add("button");\n        newButton.innerText = button;\n        newButton.addEventListener("click", () => {\n            buttonAction[button]();\n        });\n        buttonsNode.appendChild(newButton);\n    }\n}\n\nfunction displayMessage(message) {\n    messageNode.innerText = message;\n}\n\nfunction displayDescription(description) {\n    descriptionNode.innerText = description;\n}\n\nfunction displayMove(move) {\n    if (!move) {\n        return;\n    }\n    for (const sq of move.lineSqs) {\n        gridNode.children[sq].classList.add("move-line");\n    }\n    for (const keyNote of move.keyNotes) {\n        const cellNode = gridNode.children[keyNote.cell];\n        cellNode.children[keyNote.note - 1].classList.add("move-keynote");\n    }\n    for (const deadNote of move.deadNotes) {\n        const cellNode = gridNode.children[deadNote.cell];\n        cellNode.children[deadNote.note - 1].classList.add("move-deadnote");\n    }\n    moveDisplayed = move;\n}\n\nfunction displayMoveLineSqs(move) {\n    if (!move) {\n        return;\n    }\n    for (const sq of move.lineSqs) {\n        gridNode.children[sq].classList.add("move-line");\n    }\n    moveDisplayed = move;\n}\n\nfunction removeMove() {\n    if (!moveDisplayed) {\n        return;\n    }\n    console.log(moveDisplayed);\n    for (const sq of moveDisplayed.lineSqs) {\n        gridNode.children[sq].classList.remove("move-line");\n    }\n    for (const keyNote of moveDisplayed.keyNotes) {\n        const cellNode = gridNode.children[keyNote.cell];\n        if (cellNode.classList.contains("value")) break;\n        console.log(keyNote.cell, cellNode);\n        console.log(keyNote.note);\n        cellNode.children[keyNote.note - 1].classList.remove("move-keynote");\n    }\n\n    for (const deadNote of moveDisplayed.deadNotes) {\n        const cellNode = gridNode.children[deadNote.cell];\n        if (cellNode.classList.contains("value")) break;\n        cellNode.children[deadNote.note - 1].classList.remove("move-deadnote");\n    }\n    moveDisplayed = null;\n}\n\nfunction displayInvalid(report) {\n    if (!report) {\n        return;\n    }\n    for (const cell of report.line) {\n        gridNode.children[cell].classList.add("invalid-line");\n    }\n    for (const cell of report.squares) {\n        gridNode.children[cell].classList.add("invalid-square");\n    }\n    invalidDisplayed = report;\n}\n\nfunction removeInvalid() {\n    if (!invalidDisplayed) {\n        return;\n    }\n    for (const cell of invalidDisplayed.line) {\n        gridNode.children[cell].classList.remove("invalid-line");\n    }\n    for (const cell of invalidDisplayed.squares) {\n        gridNode.children[cell].classList.remove("invalid-square");\n    }\n    invalidDisplayed = null;\n}\n\nfunction displayAddNote(i, j) {\n    const noteNode = gridNode.children[i].children[j - 1];\n    noteNode.classList.remove("no");\n    noteNode.classList.add("yes");\n}\n\nfunction displayRemoveNote(i, j) {\n    const noteNode = gridNode.children[i].children[j - 1];\n    noteNode.classList.remove("yes");\n    noteNode.classList.add("no");\n}\n\nconst dom = {\n    displayBoard,\n    displayButtons,\n    displayMessage,\n    displayDescription,\n    displayMove,\n    displayMoveLineSqs,\n    removeMove,\n    displayInvalid,\n    removeInvalid,\n    displayAddNote,\n    displayRemoveNote,\n};\n\n;// ./src/calc/class-Move.js\nclass Move {\n    constructor(type, hint, description, lineSqs, keyNotes, deadNotes) {\n        this.type = type;\n        this.hint = hint;\n        this.description = description;\n        this.lineSqs = lineSqs;\n        this.keyNotes = keyNotes;\n        this.deadNotes = deadNotes;\n    }\n}\n;// ./src/calc/tnq-nakeds.js\n\n\n\n\n\n\n\nfunction naked1(board) {\n    const movesFound = [];\n\n    const nakedSquares = sqs.all.filter((i) => board.noteCount(i) === 1);\n    for (const sq of nakedSquares) {\n        const newMove = new Move(\n            `Naked Single`,\n            `Look for a cell with only one possible value`,\n            `This cell has only one note - that must be its value!`,\n            [sq],\n            board.createNoteLabels([sq], bit.allNotes),\n            [],\n        );\n        movesFound.push(newMove);\n    }\n\n    return movesFound;\n}\n\nconst numberWord = { 1: "Single", 2: "Double", 3: "Triple", 4: "Quadruple" };\n\nfunction naked234(board, n) {\n    console.assert(n >= 2 && n <= 4, "Invalid argument to naked234");\n    const movesFound = [];\n\n    for (const house of sqs.houses) {\n        const activeSquares = house.filter((i) => board.hasNoValue(i));\n\n        // To avoid replication between naked and hiddens\n        if (n > Math.floor(activeSquares.length / 2)) {\n        continue;\n        }\n        // could remove Math.floor?\n\n        for (const subsets of cmb.bipartitions(activeSquares, n)) {\n            const [subsetA, subsetB] = subsets;\n            const subsetANotes = board.noteUnion(subsetA);\n            if (bit.count(subsetANotes) > n) {\n                continue;\n            }\n            const subsetBNotes = board.noteUnion(subsetB);\n            if ((subsetBNotes & subsetANotes) === 0) {\n                continue;\n            }\n            const newMove = new Move(\n                `Naked ${numberWord[n]}`,\n                `Look for ${n} cells which can only take ${n} values between them`,\n                `There are only ${n} possible values across ${n} cells so the values cannot be used elsewhere in the house`,\n                house,\n                board.createNoteLabels(subsetA, subsetANotes),\n                board.createNoteLabels(subsetB, subsetANotes),\n            );\n            movesFound.push(newMove);\n        }\n    }\n\n    return movesFound;\n}\n\n;// ./src/calc/tnq-hiddens.js\n\n\n\n\n\n\n\nconst tnq_hiddens_numberWord = { 1: "Single", 2: "Double", 3: "Triple", 4: "Quadruple" };\n\nfunction hidden1234(board, n) {\n    console.assert(n >= 1 && n <= 4, "Invalid argument to hidden1234");\n    const movesFound = [];\n    const hint =\n        n === 1\n            ? "Look for a note which is only in one cell of its house"\n            : `Look for ${n} notes which are in only ${n} cells of the house`;\n    const description =\n        n === 1\n            ? "This value must be in this cell, so no other value is possible here"\n            : `These ${n} values must be in these ${n} cells, so no other values are possible`;\n\n    for (const house of sqs.houses) {\n        const activeSquares = house.filter((i) => board.hasNoValue(i));\n        const len = activeSquares.length;\n\n        // To avoid replication between naked and hiddens\n        if (n > Math.floor((len - 1) / 2)) {\n            continue;\n        }\n        // could remove Math.floor?\n        \n\n        for (const subsets of cmb.bipartitions(activeSquares, len - n)) {\n            const [subsetA, subsetB] = subsets;\n            const subsetANotes = board.noteUnion(subsetA);\n            if (bit.count(subsetANotes) > len - n) {\n                continue;\n            }\n            const subsetBNotes = board.noteUnion(subsetB);\n            if ((subsetBNotes & subsetANotes) === 0) {\n                continue;\n            }\n\n            const newMove = new Move(\n                `Hidden ${tnq_hiddens_numberWord[n]}`,\n                hint,\n                description,\n                house,\n                board.createNoteLabels(subsetB, bit.not(subsetANotes)),\n                board.createNoteLabels(subsetB, subsetANotes),\n            );\n            movesFound.push(newMove);\n        }\n    }\n\n    return movesFound;\n}\n\n;// ./src/calc/tnq-pointing.js\n\n\n\n\n\n\n\nconst pointingTriples = blockAndLineTriples(sqs.rowOf).concat(\n    blockAndLineTriples(sqs.columnOf),\n);\n\nfunction pointing(board) {\n    const movesFound = [];\n    for (const triple of pointingTriples) {\n        const activeBlockAndLine = triple[0].filter((i) => board.hasNoValue(i));\n        const activeBlockOnly = triple[1].filter((i) => board.hasNoValue(i));\n        const activeLineOnly = triple[2].filter((i) => board.hasNoValue(i));\n\n        const blockAndLineNotes = board.noteUnion(activeBlockAndLine);\n        const blockOnlyNotes = board.noteUnion(activeBlockOnly);\n        const lineOnlyNotes = board.noteUnion(activeLineOnly);\n\n        const targetNotes = blockAndLineNotes & lineOnlyNotes & bit.not(blockOnlyNotes);\n        const numTargetNotes = bit.count(targetNotes);\n\n        // exclude 1 target note - this will be spotted by hidden single\n        if (numTargetNotes > 1) {\n            const newMove = new Move(\n                this.name, //`Pointing`,\n                "Look for block notes restricted to a single line",\n                "Block values restricted to a line can be removed from other line cells",\n                triple.flat(),\n                board.createNoteLabels(activeBlockAndLine, targetNotes),\n                board.createNoteLabels(activeLineOnly, targetNotes),\n            );\n            movesFound.push(newMove);\n        }\n    }\n    return movesFound;\n}\n\nfunction claiming(board) {\n    const movesFound = [];\n    for (const triple of pointingTriples) {\n        const activeBlockAndLine = triple[0].filter((i) => board.hasNoValue(i));\n        const activeBlockOnly = triple[1].filter((i) => board.hasNoValue(i));\n        const activeLineOnly = triple[2].filter((i) => board.hasNoValue(i));\n\n        const blockAndLineNotes = board.noteUnion(activeBlockAndLine);\n        const blockOnlyNotes = board.noteUnion(activeBlockOnly);\n        const lineOnlyNotes = board.noteUnion(activeLineOnly);\n\n        const targetNotes = blockAndLineNotes & bit.not(lineOnlyNotes) & blockOnlyNotes;\n        const numTargetNotes = bit.count(targetNotes);\n\n        // exclude 1 target note - this will be spotted by hidden single\n        if (numTargetNotes > 1) {\n            const newMove = new Move(\n                this.name, //`Claiming`,\n                "Look for line notes restricted to a single block",\n                "Line values restricted to a block can be removed from other block cells",\n                triple.flat(),\n                board.createNoteLabels(activeBlockAndLine, targetNotes),\n                board.createNoteLabels(activeBlockOnly, targetNotes),\n            );\n            movesFound.push(newMove);\n        }\n    }\n    return movesFound;\n}\n\n// triple: [block&line], [block only], [line only]\nfunction blockAndLineTriples(lineOf) {\n    const triples = [];\n    for (let b = 0; b < 9; b++) {\n        for (let l = 0; l < 9; l++) {\n            const triple = [[], [], []];\n            for (const sq of sqs.all) {\n                const sqLine = lineOf(sq);\n                const sqBlock = sqs.blockOf(sq);\n                if (sqBlock === b && sqLine === l) {\n                    triple[0].push(sq);\n                } else if (sqBlock === b) {\n                    triple[1].push(sq);\n                } else if (sqLine === l) {\n                    triple[2].push(sq);\n                }\n            }\n            if (triple[0].length > 0) {\n                triples.push(triple);\n            }\n        }\n    }\n    return triples;\n}\n\n;// ./src/calc/tnq-xwing.js\n\n\n\n\n\n\nconst xWingNames = { 2: "X-Wing", 3: "Swordfish", 4: "Jellyfish" };\n\nfunction xWing(board, n) {\n    const movesFound = [];\n\n    // assume rows restricted first\n    for (let x = 1; x <= 9; x++) {\n        const rowBinaries = sqs.rows.map((r) => squaresToNoteTrace(board, r, x));\n        const rowNoteCounts = rowBinaries.map((e) => bit.count(e));\n        const potentialRowIndices = rowBinaries\n            .keys()\n            .filter((i) => rowNoteCounts[i] <= n && rowNoteCounts[i] >= 2)\n            .toArray();\n        if (potentialRowIndices.length < n) continue;\n\n        for (const comb of cmb.bipartitions(potentialRowIndices, n)) {\n            const targetRowIndices = comb[0];\n            const targetRowBinaries = targetRowIndices.map((i) => rowBinaries[i]);\n            const unionTargetRowsBinary = bit.union(targetRowBinaries);\n            if (bit.count(unionTargetRowsBinary) !== n) continue;\n\n            const targetColumnIndices = bit.onePositionsFromZero(unionTargetRowsBinary);\n            const { crossCells, sweepCells, lines } = generateCellsForXWing(\n                targetRowIndices,\n                targetColumnIndices,\n                true,\n            );\n            if ((board.noteUnion(sweepCells) & bit.nth(x)) === 0) continue;\n\n            const newMove = new Move(\n                `${xWingNames[n]} Rows`,\n                `Look for a note in ${n} rows that is restricted to only ${n} columns`,\n                `The note value for the ${n} columns must be in these ${n} rows only`,\n                lines,\n                board.createNoteLabels(crossCells, bit.nth(x)),\n                board.createNoteLabels(sweepCells, bit.nth(x)),\n            );\n            movesFound.push(newMove);\n        }\n    }\n\n    // now do columns!!\n    for (let x = 1; x <= 9; x++) {\n        const colBinaries = sqs.columns.map((c) => squaresToNoteTrace(board, c, x));\n        const colNoteCounts = colBinaries.map((e) => bit.count(e));\n        const potentialColIndices = colBinaries\n            .keys()\n            .filter((i) => colNoteCounts[i] <= n && colNoteCounts[i] >= 2)\n            .toArray();\n        if (potentialColIndices.length < n) continue;\n\n        for (const comb of cmb.bipartitions(potentialColIndices, n)) {\n            const targetColIndices = comb[0];\n            const targetColBinaries = targetColIndices.map((i) => colBinaries[i]);\n            const unionTargetColsBinary = bit.union(targetColBinaries);\n            if (bit.count(unionTargetColsBinary) !== n) continue;\n\n            const targetRowIndices = bit.onePositionsFromZero(unionTargetColsBinary);\n            const { crossCells, sweepCells, lines } = generateCellsForXWing(\n                targetRowIndices,\n                targetColIndices,\n                false,\n            );\n            if ((board.noteUnion(sweepCells) & bit.nth(x)) === 0) continue;\n\n            const newMove = new Move(\n                `${xWingNames[n]} Columns`,\n                `Look for a note in ${n} columns that is restricted to only ${n} rows`,\n                `The note value for the ${n} rows must be in these ${n} columns only`,\n                lines,\n                board.createNoteLabels(crossCells, bit.nth(x)),\n                board.createNoteLabels(sweepCells, bit.nth(x)),\n            );\n            movesFound.push(newMove);\n        }\n    }\n    return movesFound;\n}\n\nfunction generateCellsForXWing(rowIndices, colIndices, isRowType) {\n    const crossCells = [];\n    const sweepCells = [];\n    for (const sq of sqs.all) {\n        const sqRow = sqs.rowOf(sq);\n        const sqColumn = sqs.columnOf(sq);\n        const inTargetRows = rowIndices.includes(sqRow);\n        const inTargetColumns = colIndices.includes(sqColumn);\n        if (inTargetRows && inTargetColumns) {\n            crossCells.push(sq);\n        } else if (isRowType && !inTargetRows && inTargetColumns) {\n            sweepCells.push(sq);\n        } else if (!isRowType && inTargetRows && !inTargetColumns) {\n            sweepCells.push(sq);\n        }\n    }\n    const rowLines = rowIndices.map((i) => sqs.rows[i]);\n    const colLines = colIndices.map((i) => sqs.columns[i]);\n    const lines = rowLines.concat(colLines).flat();\n    return { crossCells, sweepCells, lines };\n}\n\n// returns a binary indicating presence of specified note\nfunction squaresToNoteTrace(board, squares, note) {\n    return squares\n        .map((sq, i) => (board.hasNote(sq, note) ? 1 << i : 0))\n        .reduce((a, b) => a + b, 0);\n}\n\n;// ./src/calc/mod-calc.js\n\n\n\n\n\nclass Strategy {\n    constructor(name, difficulty, findMoves) {\n        this.name = name;\n        this.difficulty = difficulty;\n        this.findMoves = findMoves;\n    }\n}\n\nconst strategies = [\n    new Strategy("Naked Single", 0, (b) => naked1(b)),\n    new Strategy("Hidden Single", 0, (b) => hidden1234(b, 1)), \n    new Strategy("Naked Double", 1, (b) => naked234(b, 2)),\n    new Strategy("Hidden Double", 1, (b) => hidden1234(b, 2)), \n    new Strategy("Naked Triple", 1, (b) => naked234(b, 3)),\n    new Strategy("Hidden Triple", 2, (b) => hidden1234(b, 3)),\n    new Strategy("Naked Quadruple", 2, (b) => naked234(b, 4)),\n    new Strategy("Hidden Quadruple", 2, (b) => hidden1234(b, 4)),\n    new Strategy("Pointing", 2, (b) => pointing(b)),\n    new Strategy("Claiming", 2, (b) => claiming(b)),\n    new Strategy("X-Wing", 2, (b) => xWing(b, 2)),\n    new Strategy("Swordfish", 2, (b) => xWing(b, 3)),\n    new Strategy("Jellyfish", 3, (b) => xWing(b, 4)),\n];\n\n\nfunction findMove(board) {\n    console.time("findMove");\n    let result = null;\n    for (const strategy of strategies) {\n        console.time(`  ${strategy.name}`)\n        const moves = strategy.findMoves(board);\n        console.timeEnd(`  ${strategy.name}`)\n        if (moves.length > 0) {\n            moves.sort((a, b) => {\n                return b.deadNotes.length - a.deadNotes.length;\n            });\n            console.log(moves)\n            result = moves[0];\n            break;\n        }\n    }\n    console.timeEnd("findMove");\n    return result;\n}\n\nconst calc = { findMove };\n;// ./src/control.js\n/* eslint-disable no-unused-vars */\n\n\n\n\n\n\nconst board = new Board();\nlet state;\nlet move;\n\n// let move = calc.findMove(board);\n\nfunction getState() {\n    return state;\n}\n\nfunction start() {\n    board.resetAll();\n    state = new SetupMode();\n}\n\nfunction startDefault() {\n    board.resetAll();\n    const squares = [\n        0, 1, 2, 5, 12, 14, 16, 18, 23, 29, 31, 33, 34, 35, 36, 40, 41, 47, 52, 57, 59,\n        62, 71, 76, 78, 80,\n    ];\n    const values = [\n        6, 8, 7, 4, 3, 9, 7, 9, 8, 5, 3, 1, 6, 7, 4, 7, 1, 3, 8, 2, 7, 3, 5, 9, 8, 4,\n    ];\n    squares.forEach((s, i) => board.setValue(s, values[i]));\n    state = new SetupMode();\n}\n\nconst buttonAction = {\n    reset() {\n        if (confirm("Reset back to empty board - are you sure?")) {\n            start();\n        }\n    },\n    restart() {\n        if (\n            confirm("Return to start position - are you sure?\\nAll progress will be lost")\n        ) {\n            file.loadStart(board);\n            state = new SetupMode();\n        }\n    },\n    done() {\n        file.saveStart(board);\n        state = new GameMode();\n    },\n    forward() {\n        file.forwardGame(board);\n        dom.displayBoard(board);\n        state = new GameMode(); // better to display DOM?\n    },\n    back() {\n        file.backGame(board);\n        dom.displayBoard(board);\n        state = new GameMode();\n    },\n    recalc() {\n        board.recalculateAllNotes();\n        dom.displayBoard(board);\n        file.saveGame(board);\n    },\n    clue() {\n        move = calc.findMove(board);\n        if (move) {\n            state = new HintMode(false);\n        }\n    },\n    show() {\n        state = new HintMode(true);\n    },\n    hide() {\n        dom.removeMove();\n        state = new GameMode();\n    },\n};\n\nconst action = {\n    removeNote(i, j) {\n        board.removeNote(i, j);\n        dom.displayRemoveNote(i, j);\n        file.saveGame(board);\n    },\n    reinstateMissingNote(i, j) {\n        if (sqs.peers[i].every((sq) => board.getValue(sq) !== j)) {\n            board.addNote(i, j);\n            dom.displayAddNote(i, j);\n            file.saveGame(board);\n        }\n    },\n    setValue(i, j) {\n        board.setValue(i, j);\n        dom.displayBoard(board);\n        file.saveGame(board);\n        state = board.isComplete() ? new EndMode() : new GameMode();\n    },\n    undoValue(i) {\n        board.undoValue(i);\n        dom.displayBoard(board);\n        file.saveGame(board);\n        state = new GameMode();\n    },\n    setValueOrRemoveNote(i, j) {\n        if (board.noteCount(i) === 1) {\n            this.setValue(i, j);\n        } else {\n            this.removeNote(i, j);\n        }\n    },\n};\n\nclass EndMode {\n    constructor(bool) {\n        dom.displayButtons(["back", "restart", "reset"]);\n        dom.displayMessage("Congratulations!");\n        dom.displayDescription("");\n    }\n\n    valueClick(i) {\n        if (file.getStartPosition()[i]) return;\n        action.undoValue(i);\n        state = new GameMode();\n    }\n\n    valueClickRight(i) {\n        this.valueClick(i);\n    }\n}\n\nclass HintMode {\n    constructor(bool) {\n        if (bool) {\n            dom.displayMove(move);\n            dom.displayButtons(["hide"]);\n            dom.displayMessage(move.type);\n            dom.displayDescription(move.description);\n        } else {\n            if (move.type !== "Naked Single") {\n                dom.displayMoveLineSqs(move);\n            }\n            dom.displayButtons(["show", "hide"]);\n            dom.displayDescription(move.hint);\n            dom.displayMessage(move.type);\n        }\n    }\n\n    valueClick(i) {\n        if (file.getStartPosition()[i]) return;\n        action.undoValue(i);\n    }\n\n    valueClickRight(i) {\n        this.valueClick(i);\n    }\n\n    presentNoteClick(i, j) {\n        action.setValueOrRemoveNote(i, j);\n        if (move.deadNotes.every((e) => !board.hasNote(e.cell, e.note))) {\n            dom.removeMove();\n            state = new GameMode();\n        }\n    }\n\n    presentNoteClickRight(i, j) {\n        action.setValue(i, j);\n    }\n\n    missingNoteClick(i, j) {\n        action.reinstateMissingNote(i, j);\n    }\n\n    missingNoteClickRight(i, j) {\n        this.missingNoteClick(i, j);\n    }\n}\n\nclass GameMode {\n    constructor() {\n        dom.displayButtons(["clue", "recalc", "back", "forward", "restart", "reset"]);\n        dom.displayMessage("Get solving!");\n        dom.displayDescription("Use both mouse buttons to toggle values and notes");\n    }\n\n    valueClick(i) {\n        if (file.getStartPosition()[i]) return;\n        action.undoValue(i);\n    }\n\n    valueClickRight(i) {\n        this.valueClick(i);\n    }\n\n    presentNoteClick(i, j) {\n        action.setValueOrRemoveNote(i, j);\n    }\n\n    presentNoteClickRight(i, j) {\n        action.setValue(i, j);\n    }\n\n    missingNoteClick(i, j) {\n        action.reinstateMissingNote(i, j);\n    }\n\n    missingNoteClickRight(i, j) {\n        action.reinstateMissingNote(i, j);\n    }\n}\n\nclass SetupMode {\n    constructor() {\n        dom.displayBoard(board);\n        dom.displayButtons(["done", "reset"]);\n        dom.displayMessage("Create start position");\n        dom.displayDescription("Click done when ready");\n    }\n\n    valueClick(i) {\n        board.undoValue(i);\n        dom.displayBoard(board);\n    }\n\n    valueClickRight(i) {\n        this.valueClick(i);\n    }\n\n    presentNoteClick(i, j) {\n        board.setValue(i, j);\n        dom.displayBoard(board);\n        this.#checkIfPositionInvalid();\n    }\n\n    presentNoteClickRight(i, j) {\n        this.presentNoteClick(i, j);\n    }\n\n    missingNoteClick(i, j) {\n        return;\n    }\n\n    missingNoteClickRight(i, j) {\n        return;\n    }\n\n    #checkIfPositionInvalid() {\n        const invalidSubset = board.findInvalidSubset();\n        if (invalidSubset) {\n            state = new InvalidMode(invalidSubset);\n        }\n    }\n}\n\nclass InvalidMode {\n    constructor(invalidSubset) {\n        const standardDescription =\n            invalidSubset.line.length === 0\n                ? "Cell has no notes available - undo or reset"\n                : "Highlighted cells have insufficient notes available - undo or reset";\n        dom.displayInvalid(invalidSubset);\n        dom.displayButtons(["reset"]);\n        dom.displayMessage("Invalid position");\n        dom.displayDescription(standardDescription);\n    }\n\n    valueClick(i) {\n        board.undoValue(i);\n        dom.displayBoard(board);\n        this.#checkIfPositionValid();\n    }\n\n    valueClickRight(i) {\n        this.valueClick(i);\n    }\n\n    presentNoteClick(i, j) {\n        return;\n    }\n\n    presentNoteClickRight(i, j) {\n        return;\n    }\n\n    missingNoteClick(i, j) {\n        return;\n    }\n\n    missingNoteClickRight(i, j) {\n        return;\n    }\n\n    #checkIfPositionValid() {\n        dom.removeInvalid();\n        const invalidSubset = board.findInvalidSubset();\n        if (invalidSubset) {\n            state = new InvalidMode(invalidSubset);\n        } else {\n            state = new SetupMode();\n        }\n    }\n}\n\n;// ./src/index.js\n\n\n// eslint-disable-next-line no-unused-vars\n\n\n// start();\nstartDefault();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzYwLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsTUFBK0Y7QUFDL0YsTUFBcUY7QUFDckYsTUFBNEY7QUFDNUYsTUFBK0c7QUFDL0csTUFBd0c7QUFDeEcsTUFBd0c7QUFDeEcsTUFBbUc7QUFDbkc7QUFDQTs7QUFFQTs7QUFFQSw0QkFBNEIsNkJBQW1CO0FBQy9DLHdCQUF3QiwwQ0FBYTtBQUNyQyxpQkFBaUIsK0JBQWE7QUFDOUIsaUJBQWlCLHVCQUFNO0FBQ3ZCLDZCQUE2Qiw4QkFBa0I7O0FBRS9DLGFBQWEsa0NBQUcsQ0FBQyxvQkFBTzs7OztBQUk2QztBQUNyRSxPQUFPLGdEQUFlLG9CQUFPLElBQUksb0JBQU8sVUFBVSxvQkFBTyxtQkFBbUIsRUFBQzs7O0FDeEI3RTs7QUFFQSxNQUFNLFdBQUc7O0FBRVQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QjtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLE9BQU87QUFDdkIsb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQix3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsV0FBRztBQUNIO0FBQ0EsSUFBSSxXQUFHO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQSw0Qjs7QUN0R0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzdEQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQixZQUFZO0FBQ2hDO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPLGNBQWM7O0FBRXJCOzs7QUN0Q3dDO0FBQ0E7QUFDQTs7QUFFeEM7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLEdBQUc7QUFDeEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBLFFBQVEsR0FBRztBQUNYOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4QkFBOEIsR0FBRztBQUNqQzs7QUFFQTtBQUNBLDhCQUE4QixHQUFHO0FBQ2pDOztBQUVBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCOztBQUVBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCOztBQUVBO0FBQ0EsOEJBQThCLEdBQUc7QUFDakM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsR0FBRztBQUNsQjtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLEdBQUc7QUFDWDs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QixHQUFHO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCOztBQUVBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCOztBQUVBO0FBQ0EsUUFBUSxHQUFHO0FBQ1g7O0FBRUE7QUFDQSx3QkFBd0IsR0FBRztBQUMzQjtBQUNBO0FBQ0EsY0FBYztBQUNkLG9CQUFvQixHQUFHO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVEsR0FBRztBQUNYLDZCQUE2QixHQUFHO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixHQUFHO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5QkFBeUIsR0FBRztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxnQkFBZ0I7QUFDakQsK0JBQStCLEdBQUc7QUFDbEM7QUFDQSxzQ0FBc0MsR0FBRztBQUN6QztBQUNBO0FBQ0Esd0JBQXdCLEdBQUc7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2pNQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTix5REFBeUQsRUFBRTtBQUMzRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLCtEQUErRCxFQUFFO0FBQ2pFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixrRUFBa0UsRUFBRTtBQUNwRTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzdEd0M7QUFDYzs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9CQUFvQixHQUFHO0FBQ3ZCO0FBQ0E7QUFDQSxvQ0FBb0MsR0FBRyxVQUFVO0FBQ2pELG9DQUFvQyxHQUFHLGFBQWE7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFFBQVE7QUFDdEM7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLDhCQUE4QixRQUFRO0FBQ3RDO0FBQ0EsYUFBYTtBQUNiLFVBQVU7QUFDVjtBQUNBLDRCQUE0QixRQUFRO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxRQUFRO0FBQzFDO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksWUFBWTtBQUN4QixTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMzTE87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQzs7QUNUeUM7QUFDQTtBQUNBO0FBQ0Y7O0FBRVg7O0FBRTVCO0FBQ0E7O0FBRUEseUJBQXlCLEdBQUc7QUFDNUI7QUFDQSw0QkFBNEIsSUFBSTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxHQUFHO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLEdBQUc7QUFDM0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEIsR0FBRztBQUNqQztBQUNBO0FBQ0EsZ0JBQWdCLEdBQUc7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLElBQUk7QUFDcEMseUJBQXlCLGNBQWM7QUFDdkMsNEJBQTRCLEdBQUcsNEJBQTRCLEdBQUc7QUFDOUQsa0NBQWtDLEdBQUcseUJBQXlCLEdBQUc7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FDaEV5QztBQUNBO0FBQ0E7QUFDRjs7QUFFakI7O0FBRXRCLE1BQU0sc0JBQVUsS0FBSzs7QUFFckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLEdBQUcsMEJBQTBCLEdBQUc7QUFDMUQ7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLEdBQUcsMEJBQTBCLEdBQUc7O0FBRXZELHdCQUF3QixHQUFHO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCQUE4QixHQUFHO0FBQ2pDO0FBQ0E7QUFDQSxnQkFBZ0IsR0FBRztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDLElBQUk7QUFDcEMsMEJBQTBCLHNCQUFVLElBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELEdBQUc7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUN4RHlDO0FBQ0E7QUFDRjs7O0FBR1Q7O0FBRTlCLDRDQUE0QyxHQUFHO0FBQy9DLHdCQUF3QixHQUFHO0FBQzNCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0VBQWdFLEdBQUc7QUFDbkUsK0JBQStCLEdBQUc7O0FBRWxDO0FBQ0E7QUFDQSxnQ0FBZ0MsSUFBSTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxnREFBZ0QsR0FBRztBQUNuRCwrQkFBK0IsR0FBRzs7QUFFbEM7QUFDQTtBQUNBLGdDQUFnQyxJQUFJO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQix3QkFBd0IsT0FBTztBQUMvQjtBQUNBLDZCQUE2QixHQUFHO0FBQ2hDO0FBQ0EsZ0NBQWdDLEdBQUc7QUFDbkM7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDOUZ5QztBQUNBO0FBQ0E7QUFDRjs7QUFFdEI7QUFDakIscUJBQXFCOztBQUVyQjtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUIsNEJBQTRCLEdBQUc7QUFDL0IscURBQXFELEdBQUc7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkIsR0FBRztBQUM5QjtBQUNBO0FBQ0EsMENBQTBDLEdBQUc7QUFDN0MsZ0JBQWdCLEdBQUc7O0FBRW5CLHdDQUF3QyxHQUFHO0FBQzNDLG9CQUFvQixnQ0FBZ0M7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsR0FBRzs7QUFFbEQsZ0NBQWdDLElBQUk7QUFDcEMsbUJBQW1CLGVBQWU7QUFDbEMsc0NBQXNDLEdBQUcsa0NBQWtDLEdBQUc7QUFDOUUsMENBQTBDLEdBQUcsMkJBQTJCLEdBQUc7QUFDM0U7QUFDQSxtREFBbUQsR0FBRztBQUN0RCxtREFBbUQsR0FBRztBQUN0RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCLDRCQUE0QixHQUFHO0FBQy9CLHFEQUFxRCxHQUFHO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCLEdBQUc7QUFDOUI7QUFDQTtBQUNBLDBDQUEwQyxHQUFHO0FBQzdDLGdCQUFnQixHQUFHOztBQUVuQixxQ0FBcUMsR0FBRztBQUN4QyxvQkFBb0IsZ0NBQWdDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLEdBQUc7O0FBRWxELGdDQUFnQyxJQUFJO0FBQ3BDLG1CQUFtQixlQUFlO0FBQ2xDLHNDQUFzQyxHQUFHLHFDQUFxQyxHQUFHO0FBQ2pGLDBDQUEwQyxHQUFHLHdCQUF3QixHQUFHO0FBQ3hFO0FBQ0EsbURBQW1ELEdBQUc7QUFDdEQsbURBQW1ELEdBQUc7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixHQUFHO0FBQ3hCLHNCQUFzQixHQUFHO0FBQ3pCLHlCQUF5QixHQUFHO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxHQUFHO0FBQzlDLDJDQUEyQyxHQUFHO0FBQzlDO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDaEhtRDtBQUNMO0FBQ1M7QUFDaEI7O0FBRXZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkNBQTJDLE1BQU07QUFDakQsNENBQTRDLFVBQVU7QUFDdEQsMkNBQTJDLFFBQVE7QUFDbkQsNENBQTRDLFVBQVU7QUFDdEQsMkNBQTJDLFFBQVE7QUFDbkQsNENBQTRDLFVBQVU7QUFDdEQsOENBQThDLFFBQVE7QUFDdEQsK0NBQStDLFVBQVU7QUFDekQsdUNBQXVDLFFBQVE7QUFDL0MsdUNBQXVDLFFBQVE7QUFDL0MscUNBQXFDLEtBQUs7QUFDMUMsd0NBQXdDLEtBQUs7QUFDN0Msd0NBQXdDLEtBQUs7QUFDN0M7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGNBQWM7QUFDeEM7QUFDQSw2QkFBNkIsY0FBYztBQUMzQztBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFTyxlQUFlLFc7O0FDbER0QjtBQUN5QztBQUNEO0FBQ0U7QUFDWDtBQUNXOztBQUUxQyxrQkFBa0IsS0FBSztBQUN2QjtBQUNBOztBQUVBOztBQUVPO0FBQ1A7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTs7QUFFTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksSUFBSTtBQUNoQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsUUFBUSxJQUFJO0FBQ1o7QUFDQSxLQUFLO0FBQ0w7QUFDQSxRQUFRLElBQUk7QUFDWixRQUFRLEdBQUc7QUFDWCxnQ0FBZ0M7QUFDaEMsS0FBSztBQUNMO0FBQ0EsUUFBUSxJQUFJO0FBQ1osUUFBUSxHQUFHO0FBQ1g7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFFBQVEsR0FBRztBQUNYLFFBQVEsSUFBSTtBQUNaLEtBQUs7QUFDTDtBQUNBLGVBQWUsSUFBSTtBQUNuQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFFBQVEsR0FBRztBQUNYO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsR0FBRztBQUNYLFFBQVEsSUFBSTtBQUNaLEtBQUs7QUFDTDtBQUNBLFlBQVksR0FBRztBQUNmO0FBQ0EsWUFBWSxHQUFHO0FBQ2YsWUFBWSxJQUFJO0FBQ2hCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxRQUFRLEdBQUc7QUFDWCxRQUFRLElBQUk7QUFDWjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsUUFBUSxHQUFHO0FBQ1gsUUFBUSxJQUFJO0FBQ1o7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBLFFBQVEsR0FBRztBQUNYLFFBQVEsR0FBRztBQUNYLFFBQVEsR0FBRztBQUNYOztBQUVBO0FBQ0EsWUFBWSxJQUFJO0FBQ2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLEdBQUc7QUFDZixZQUFZLEdBQUc7QUFDZixZQUFZLEdBQUc7QUFDZixZQUFZLEdBQUc7QUFDZixVQUFVO0FBQ1Y7QUFDQSxnQkFBZ0IsR0FBRztBQUNuQjtBQUNBLFlBQVksR0FBRztBQUNmLFlBQVksR0FBRztBQUNmLFlBQVksR0FBRztBQUNmO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLElBQUk7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxHQUFHO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVEsR0FBRztBQUNYLFFBQVEsR0FBRztBQUNYLFFBQVEsR0FBRztBQUNYOztBQUVBO0FBQ0EsWUFBWSxJQUFJO0FBQ2hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRLEdBQUc7QUFDWCxRQUFRLEdBQUc7QUFDWCxRQUFRLEdBQUc7QUFDWCxRQUFRLEdBQUc7QUFDWDs7QUFFQTtBQUNBO0FBQ0EsUUFBUSxHQUFHO0FBQ1g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRLEdBQUc7QUFDWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsR0FBRztBQUNYLFFBQVEsR0FBRztBQUNYLFFBQVEsR0FBRztBQUNYLFFBQVEsR0FBRztBQUNYOztBQUVBO0FBQ0E7QUFDQSxRQUFRLEdBQUc7QUFDWDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRLEdBQUc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7OztBQ2pUcUI7O0FBRXJCO0FBQ21EOztBQUVuRDtBQUNBLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdWRva3UvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vc3Vkb2t1Ly4vc3JjL21vZHMvbW9kLXNxcy5qcz8zZTE3Iiwid2VicGFjazovL3N1ZG9rdS8uL3NyYy9tb2RzL21vZC1iaXQuanM/Yjg3NyIsIndlYnBhY2s6Ly9zdWRva3UvLi9zcmMvbW9kcy9tb2QtY21iLmpzPzgwOWMiLCJ3ZWJwYWNrOi8vc3Vkb2t1Ly4vc3JjL2NsYXNzLUJvYXJkLmpzPzQ2MDIiLCJ3ZWJwYWNrOi8vc3Vkb2t1Ly4vc3JjL21vZHMvbW9kLWZpbGUuanM/NTNiZCIsIndlYnBhY2s6Ly9zdWRva3UvLi9zcmMvZG9tLmpzP2NiZjAiLCJ3ZWJwYWNrOi8vc3Vkb2t1Ly4vc3JjL2NhbGMvY2xhc3MtTW92ZS5qcz8zZDk0Iiwid2VicGFjazovL3N1ZG9rdS8uL3NyYy9jYWxjL3RucS1uYWtlZHMuanM/ZWRlNCIsIndlYnBhY2s6Ly9zdWRva3UvLi9zcmMvY2FsYy90bnEtaGlkZGVucy5qcz9iYjFmIiwid2VicGFjazovL3N1ZG9rdS8uL3NyYy9jYWxjL3RucS1wb2ludGluZy5qcz8xN2FmIiwid2VicGFjazovL3N1ZG9rdS8uL3NyYy9jYWxjL3RucS14d2luZy5qcz9iNGJiIiwid2VicGFjazovL3N1ZG9rdS8uL3NyYy9jYWxjL21vZC1jYWxjLmpzPzA5NTciLCJ3ZWJwYWNrOi8vc3Vkb2t1Ly4vc3JjL2NvbnRyb2wuanM/NGI2ZSIsIndlYnBhY2s6Ly9zdWRva3UvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5vcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiY29uc29sZS50aW1lKFwiU3FzIHNldHVwXCIpXG5cbmNvbnN0IGFsbCA9IFsuLi5BcnJheSg4MSkua2V5cygpXTtcblxuZnVuY3Rpb24gcm93T2YoYykge1xuICAgIHJldHVybiBNYXRoLmZsb29yKGMgLyA5KTtcbn1cblxuZnVuY3Rpb24gY29sdW1uT2YoYykge1xuICAgIHJldHVybiBjICUgOTtcbn1cblxuZnVuY3Rpb24gYmxvY2tPZihjKSB7XG4gICAgcmV0dXJuIDMgKiBNYXRoLmZsb29yKHJvd09mKGMpIC8gMykgKyBNYXRoLmZsb29yKGNvbHVtbk9mKGMpIC8gMyk7XG59XG5cbmZ1bmN0aW9uIHNhbWVSb3coYzEsIGMyKSB7XG4gICAgcmV0dXJuIHJvd09mKGMxKSA9PT0gcm93T2YoYzIpO1xufVxuXG5mdW5jdGlvbiBzYW1lQ29sdW1uKGMxLCBjMikge1xuICAgIHJldHVybiBjb2x1bW5PZihjMSkgPT09IGNvbHVtbk9mKGMyKTtcbn1cblxuZnVuY3Rpb24gc2FtZUJsb2NrKGMxLCBjMikge1xuICAgIHJldHVybiBibG9ja09mKGMxKSA9PT0gYmxvY2tPZihjMik7XG59XG5cbmZ1bmN0aW9uIGFyZVBlZXJzKGMxLCBjMikge1xuICAgIGlmIChzYW1lUm93KGMxLCBjMikgfHwgc2FtZUNvbHVtbihjMSwgYzIpIHx8IHNhbWVCbG9jayhjMSwgYzIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGluZGV4RnJvbVJvd0NvbHVtbihyLCBjKSB7XG4gICAgcmV0dXJuIDkgKiByICsgYztcbn1cblxuY29uc3Qgcm93cyA9IFtdO1xuZm9yIChsZXQgciA9IDA7IHIgPCA5OyByKyspIHtcbiAgICBjb25zdCBjdXJyZW50TGluZSA9IFtdO1xuICAgIGZvciAobGV0IGMgPSAwOyBjIDwgOTsgYysrKSB7XG4gICAgICAgIGN1cnJlbnRMaW5lLnB1c2goaW5kZXhGcm9tUm93Q29sdW1uKHIsIGMpKTtcbiAgICB9XG4gICAgcm93cy5wdXNoKGN1cnJlbnRMaW5lKTtcbn1cblxuY29uc3QgY29sdW1ucyA9IFtdO1xuZm9yIChsZXQgYyA9IDA7IGMgPCA5OyBjKyspIHtcbiAgICBjb25zdCBjdXJyZW50TGluZSA9IFtdO1xuICAgIGZvciAobGV0IHIgPSAwOyByIDwgOTsgcisrKSB7XG4gICAgICAgIGN1cnJlbnRMaW5lLnB1c2goaW5kZXhGcm9tUm93Q29sdW1uKHIsIGMpKTtcbiAgICB9XG4gICAgY29sdW1ucy5wdXNoKGN1cnJlbnRMaW5lKTtcbn1cblxuY29uc3QgYmxvY2tzID0gW107XG5mb3IgKGxldCByID0gMDsgciA8IDk7IHIgKz0gMykge1xuICAgIGZvciAobGV0IGMgPSAwOyBjIDwgOTsgYyArPSAzKSB7XG4gICAgICAgIGJsb2Nrcy5wdXNoKGNyZWF0ZUJsb2NrQXJyYXkociwgYykpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQmxvY2tBcnJheShzdGFydFJvdywgc3RhcnRDb2x1bW4pIHtcbiAgICBjb25zdCBibG9jayA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMzsgaisrKSB7XG4gICAgICAgICAgICBibG9jay5wdXNoKGluZGV4RnJvbVJvd0NvbHVtbihzdGFydFJvdyArIGksIHN0YXJ0Q29sdW1uICsgaikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBibG9jaztcbn1cblxuY29uc3QgaG91c2VzID0gcm93cy5jb25jYXQoY29sdW1ucykuY29uY2F0KGJsb2Nrcyk7XG5cbmNvbnN0IHBlZXJzID0gW107XG5hbGwuZm9yRWFjaCgoaSkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRQZWVycyA9IFtdO1xuICAgIGFsbC5mb3JFYWNoKChqKSA9PiB7XG4gICAgICAgIGlmIChqICE9PSBpICYmIGFyZVBlZXJzKGksIGopKSB7XG4gICAgICAgICAgICBjdXJyZW50UGVlcnMucHVzaChqKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHBlZXJzLnB1c2goY3VycmVudFBlZXJzKTtcbn0pO1xuXG4vLyBhZGQgcGVlcnNPZnBlZXJzP1xuXG5leHBvcnQgY29uc3Qgc3FzID0ge1xuICAgIHJvd09mLFxuICAgIGNvbHVtbk9mLFxuICAgIGJsb2NrT2YsXG4gICAgYXJlUGVlcnMsXG4gICAgcGVlcnMsXG4gICAgcm93cyxcbiAgICBjb2x1bW5zLFxuICAgIGJsb2NrcyxcbiAgICBob3VzZXMsXG4gICAgYWxsLFxufTtcblxuY29uc29sZS50aW1lRW5kKFwiU3FzIHNldHVwXCIpIiwiY29uc3QgYWxsTm90ZXMgPSAoMSA8PCA5KSAtIDE7XG5jb25zdCBwb3NpdGlvbnMgPSBbMCwgMSwgMiwgMywgNCwgNSwgNiwgNywgOF07XG5jb25zdCBub3RlUG9zaXRpb25zID0gWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDldO1xuXG5mdW5jdGlvbiBudGgoYml0KSB7XG4gICAgcmV0dXJuIDEgPDwgKGJpdCAtIDEpO1xufVxuXG5mdW5jdGlvbiBoYXMobnVtLCBiaXQpIHtcbiAgICByZXR1cm4gKG51bSAmICgxIDw8IChiaXQgLSAxKSkpICE9PSAwO1xufVxuXG5mdW5jdGlvbiBhZGQobnVtLCBiaXQpIHtcbiAgICByZXR1cm4gbnVtIHwgKDEgPDwgKGJpdCAtIDEpKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKG51bSwgYml0KSB7XG4gICAgcmV0dXJuIG51bSAmIG5vdCgxIDw8IChiaXQgLSAxKSk7XG59XG5cbmZ1bmN0aW9uIGNvdW50KG51bSkge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgd2hpbGUgKG51bSkge1xuICAgICAgICBjb3VudCsrO1xuICAgICAgICBudW0gJj0gbnVtIC0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGNvdW50O1xufVxuXG5mdW5jdGlvbiBub3QobnVtKSB7XG4gICAgcmV0dXJuIGFsbE5vdGVzIF4gbnVtO1xufVxuXG5mdW5jdGlvbiB1bmlvbihudW1iZXJzKSB7XG4gICAgcmV0dXJuIG51bWJlcnMucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyB8IGN1cnIsIDApO1xufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3Rpb24obnVtYmVycykge1xuICAgIHJldHVybiBudW1iZXJzLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MgJiBjdXJyLCBub3QoMCkpO1xufVxuXG5mdW5jdGlvbiBvbmVQb3NpdGlvbnNGcm9tWmVybyhuKSB7XG4gICAgcmV0dXJuIHBvc2l0aW9ucy5maWx0ZXIoKGUpID0+ICgoMSA8PCBlKSAmIG4pICE9PSAwKTtcbn1cblxuZnVuY3Rpb24gb25lUG9zaXRpb25zTm90ZXMobikge1xuICAgIHJldHVybiBub3RlUG9zaXRpb25zLmZpbHRlcigoZSkgPT4gKCgxIDw8IChlIC0gMSkpICYgbikgIT09IDApO1xufVxuXG5leHBvcnQgY29uc3QgYml0ID0ge1xuICAgIGFsbE5vdGVzLFxuICAgIG50aCxcbiAgICBoYXMsXG4gICAgYWRkLFxuICAgIHJlbW92ZSxcbiAgICBjb3VudCxcbiAgICBub3QsXG4gICAgdW5pb24sXG4gICAgaW50ZXJzZWN0aW9uLFxuICAgIG9uZVBvc2l0aW9uc0Zyb21aZXJvLFxuICAgIG9uZVBvc2l0aW9uc05vdGVzLFxufTtcbiIsImNvbnNvbGUudGltZShcIkNtYiBzZXR1cFwiKTtcblxuXG5mdW5jdGlvbiBiaXBhcnRpdGlvbnMoc2V0LCBrKSB7XG4gICAgY29uc3QgYW5zID0gW107XG4gICAgZm9yIChjb25zdCBjb21iIG9mIGJpcGFydGl0aW9uc05OW3NldC5sZW5ndGhdW2tdKSB7XG4gICAgICAgIGNvbnN0IHN1YnNldCA9IGNvbWJbMF0ubWFwKChlKSA9PiBzZXRbZV0pO1xuICAgICAgICBjb25zdCBzdWJzZXRDb21wID0gY29tYlsxXS5tYXAoKGUpID0+IHNldFtlXSk7XG4gICAgICAgIGFucy5wdXNoKFtzdWJzZXQsIHN1YnNldENvbXBdKTtcbiAgICB9XG4gICAgcmV0dXJuIGFucztcbn1cblxuY29uc3QgYmlwYXJ0aXRpb25zTk4gPSBbXTtcbmZvciAobGV0IG4gPSAwOyBuIDwgMTA7IG4rKykge1xuICAgIGJpcGFydGl0aW9uc05OLnB1c2goQmlwYXJ0aXRpb25zT2ZOYXR1cmFsTnVtYmVycyhuKSk7XG59XG5cbmZ1bmN0aW9uIEJpcGFydGl0aW9uc09mTmF0dXJhbE51bWJlcnMobikge1xuICAgIGNvbnN0IHBhcnRpdGlvbnMgPSBbLi4uQXJyYXkoMTApXS5tYXAoKCkgPT4gW10pO1xuXG4gICAgZm9yIChsZXQgbSA9IDA7IG0gPCAxIDw8IG47IG0rKykge1xuICAgICAgICBjb25zdCBzdWJzZXRBID0gW107XG4gICAgICAgIGNvbnN0IHN1YnNldEIgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChtICYgKDEgPDwgaSkpIHtcbiAgICAgICAgICAgICAgICBzdWJzZXRBLnB1c2goaSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNldEIucHVzaChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwYXJ0aXRpb25zW3N1YnNldEEubGVuZ3RoXS5wdXNoKFtzdWJzZXRBLCBzdWJzZXRCXSk7XG4gICAgfVxuICAgIHJldHVybiBwYXJ0aXRpb25zO1xufVxuXG5leHBvcnQgY29uc3QgY21iID0geyBiaXBhcnRpdGlvbnMgfTtcblxuY29uc29sZS50aW1lRW5kKFwiQ21iIHNldHVwXCIpO1xuIiwiaW1wb3J0IHsgc3FzIH0gZnJvbSBcIi4vbW9kcy9tb2Qtc3FzLmpzXCI7XG5pbXBvcnQgeyBiaXQgfSBmcm9tIFwiLi9tb2RzL21vZC1iaXQuanNcIjtcbmltcG9ydCB7IGNtYiB9IGZyb20gXCIuL21vZHMvbW9kLWNtYi5qc1wiO1xuXG5jbGFzcyBDZWxsIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMubm90ZXMgPSBiaXQuYWxsTm90ZXM7XG4gICAgfVxufVxuXG5jbGFzcyBOb3RlTGFiZWwge1xuICAgIGNvbnN0cnVjdG9yKGNlbGxOdW0sIG5vdGVOdW0pIHtcbiAgICAgICAgdGhpcy5jZWxsID0gY2VsbE51bTtcbiAgICAgICAgdGhpcy5ub3RlID0gbm90ZU51bTtcbiAgICB9XG59XG5cbmNsYXNzIEludmFsaWRSZXBvcnQge1xuICAgIGNvbnN0cnVjdG9yKGxpbmUsIHNxdWFyZXMpIHtcbiAgICAgICAgdGhpcy5saW5lID0gbGluZTtcbiAgICAgICAgdGhpcy5zcXVhcmVzID0gc3F1YXJlcztcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCb2FyZCB7XG4gICAgI2NlbGxzO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuI2NlbGxzID0gQXJyYXkoODEpO1xuICAgICAgICBzcXMuYWxsLmZvckVhY2goKGkpID0+ICh0aGlzLiNjZWxsc1tpXSA9IG5ldyBDZWxsKCkpKTtcbiAgICB9XG5cbiAgICBzZXROb3Rlc09ubHkoc3EsIG5ld05vdGVzKSB7XG4gICAgICAgIHRoaXMuI2NlbGxzW3NxXS5ub3RlcyA9IG5ld05vdGVzO1xuICAgIH1cblxuICAgIGdldE5vdGVzKHNxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNjZWxsc1tzcV0ubm90ZXM7XG4gICAgfVxuXG4gICAgYWRkTm90ZShzcSwgbikge1xuICAgICAgICB0aGlzLnNldE5vdGVzT25seShzcSwgYml0LmFkZCh0aGlzLmdldE5vdGVzKHNxKSwgbikpO1xuICAgIH1cblxuICAgIHJlbW92ZU5vdGUoc3EsIG4pIHtcbiAgICAgICAgdGhpcy5zZXROb3Rlc09ubHkoc3EsIGJpdC5yZW1vdmUodGhpcy5nZXROb3RlcyhzcSksIG4pKTtcbiAgICB9XG5cbiAgICBoYXNOb3RlKHNxLCBuKSB7XG4gICAgICAgIHJldHVybiBiaXQuaGFzKHRoaXMuZ2V0Tm90ZXMoc3EpLCBuKTtcbiAgICB9XG5cbiAgICBub3RlQ291bnQoc3EpIHtcbiAgICAgICAgcmV0dXJuIGJpdC5jb3VudCh0aGlzLmdldE5vdGVzKHNxKSk7XG4gICAgfVxuXG4gICAgcmVzZXROb3RlcyhzcSkge1xuICAgICAgICB0aGlzLnNldE5vdGVzT25seShzcSwgYml0LmFsbE5vdGVzKTtcbiAgICB9XG5cbiAgICBzZXRWYWx1ZU9ubHkoc3EsIG5ld1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuI2NlbGxzW3NxXS52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIH1cblxuICAgIGdldFZhbHVlKHNxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLiNjZWxsc1tzcV0udmFsdWU7XG4gICAgfVxuXG4gICAgaGFzVmFsdWUoc3EpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoc3EpICE9PSBudWxsO1xuICAgIH1cblxuICAgIGhhc05vVmFsdWUoc3EpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoc3EpID09PSBudWxsO1xuICAgIH1cblxuICAgIHJlc2V0Q2VsbChzcSkge1xuICAgICAgICB0aGlzLnNldFZhbHVlT25seShzcSwgbnVsbCk7XG4gICAgICAgIHRoaXMucmVzZXROb3RlcyhzcSk7XG4gICAgfVxuXG4gICAgc2V0VmFsdWUoc3EsIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2V0VmFsdWVPbmx5KHNxLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuc2V0Tm90ZXNPbmx5KHNxLCAwKTtcbiAgICAgICAgdGhpcy51cGRhdGVOb3Rlc0FmdGVyU2V0VmFsdWUoc3EsIHZhbHVlKTtcbiAgICB9XG5cbiAgICB1bmRvVmFsdWUoc3EpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFZhbHVlKHNxKTtcbiAgICAgICAgdGhpcy5yZXNldENlbGwoc3EpO1xuICAgICAgICB0aGlzLnVwZGF0ZU5vdGVzQWZ0ZXJVbmRvVmFsdWUoc3EsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBpc0NvbXBsZXRlKCkge1xuICAgICAgICByZXR1cm4gc3FzLmFsbC5ldmVyeSgoaSkgPT4gdGhpcy5oYXNWYWx1ZShpKSk7XG4gICAgfVxuICAgIFxuICAgIGNsb25lVmFsdWVzKCkge1xuICAgICAgICByZXR1cm4gc3FzLmFsbC5tYXAoKGkpID0+IHRoaXMuZ2V0VmFsdWUoaSkpO1xuICAgIH0gICAgXG5cbiAgICB1cGxvYWRWYWx1ZXMobmV3VmFsdWVzKSB7XG4gICAgICAgIHRoaXMucmVzZXRBbGwoKTtcbiAgICAgICAgbmV3VmFsdWVzLmZvckVhY2goKHYsaSkgPT4gdGhpcy5zZXRWYWx1ZU9ubHkoaSx2KSk7XG4gICAgICAgIHRoaXMucmVjYWxjdWxhdGVBbGxOb3RlcygpO1xuICAgIH1cbiAgICBcbiAgICByZXNldEFsbCgpIHtcbiAgICAgICAgc3FzLmFsbC5mb3JFYWNoKChpKSA9PiB0aGlzLnJlc2V0Q2VsbChpKSk7XG4gICAgfVxuXG4gICAgY2xvbmVBbGwoKSB7XG4gICAgICAgIGNvbnN0IGJvYXJkQ2xvbmUgPSBuZXcgQm9hcmQoKTtcbiAgICAgICAgZm9yIChjb25zdCBpIG9mIHNxcy5hbGwpIHtcbiAgICAgICAgICAgIGJvYXJkQ2xvbmUuc2V0VmFsdWVPbmx5KGksIHRoaXMuZ2V0VmFsdWUoaSkpO1xuICAgICAgICAgICAgYm9hcmRDbG9uZS5zZXROb3Rlc09ubHkoaSwgdGhpcy5nZXROb3RlcyhpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJvYXJkQ2xvbmU7XG4gICAgfVxuXG4gICAgdXBsb2FkQWxsKG5ld0JvYXJkKSB7XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiBzcXMuYWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlT25seShpLCBuZXdCb2FyZC5nZXRWYWx1ZShpKSk7XG4gICAgICAgICAgICB0aGlzLnNldE5vdGVzT25seShpLCBuZXdCb2FyZC5nZXROb3RlcyhpKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBub3RlVW5pb24oc3F1YXJlcykge1xuICAgICAgICByZXR1cm4gYml0LnVuaW9uKHNxdWFyZXMubWFwKChpKSA9PiB0aGlzLmdldE5vdGVzKGkpKSk7XG4gICAgfVxuXG4gICAgbm90ZUludGVyc2VjdGlvbihzcXVhcmVzKSB7XG4gICAgICAgIHJldHVybiBiaXQuaW50ZXJzZWN0aW9uKHNxdWFyZXMubWFwKChpKSA9PiB0aGlzLmdldE5vdGVzKGkpKSk7XG4gICAgfVxuXG4gICAgdXBkYXRlTm90ZXNBZnRlclNldFZhbHVlKHNxLCB2YWx1ZSkge1xuICAgICAgICBzcXMucGVlcnNbc3FdLmZvckVhY2goKGkpID0+IHRoaXMucmVtb3ZlTm90ZShpLCB2YWx1ZSkpO1xuICAgIH1cblxuICAgIHVwZGF0ZU5vdGVzQWZ0ZXJVbmRvVmFsdWUoc3EsIHVuZG9WYWx1ZSkge1xuICAgICAgICBmb3IgKGNvbnN0IGkgb2Ygc3FzLnBlZXJzW3NxXSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFzVmFsdWUoaSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZU5vdGUoc3EsIHRoaXMuZ2V0VmFsdWUoaSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoc3FzLnBlZXJzW2ldLmV2ZXJ5KChqKSA9PiB0aGlzLmdldFZhbHVlKGopICE9PSB1bmRvVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTm90ZShpLCB1bmRvVmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlY2FsY3VsYXRlQWxsTm90ZXMoKSB7XG4gICAgICAgIGNvbnNvbGUudGltZShcInJlY2FsY3VsYXRlQWxsTm90ZXNcIik7XG4gICAgICAgIHNxcy5hbGwuZmlsdGVyKChpKSA9PiB0aGlzLmhhc05vVmFsdWUoaSkpLmZvckVhY2goKGkpID0+IHRoaXMucmVzZXROb3RlcyhpKSk7XG4gICAgICAgIGNvbnN0IHZhbHVlU3F1YXJlcyA9IHNxcy5hbGwuZmlsdGVyKChpKSA9PiB0aGlzLmhhc1ZhbHVlKGkpKTtcbiAgICAgICAgdmFsdWVTcXVhcmVzLmZvckVhY2goKGkpID0+IHRoaXMudXBkYXRlTm90ZXNBZnRlclNldFZhbHVlKGksIHRoaXMuZ2V0VmFsdWUoaSkpKTtcbiAgICAgICAgY29uc29sZS50aW1lRW5kKFwicmVjYWxjdWxhdGVBbGxOb3Rlc1wiKTtcbiAgICB9XG5cbiAgICBjcmVhdGVOb3RlTGFiZWxzKHRhcmdldFNxcywgbm90ZXNUb01hdGNoKSB7XG4gICAgICAgIGNvbnN0IG5vdGVMYWJlbHMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzcSBvZiB0YXJnZXRTcXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGhpdE5vdGVzID0gdGhpcy5nZXROb3RlcyhzcSkgJiBub3Rlc1RvTWF0Y2g7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBiaXQub25lUG9zaXRpb25zTm90ZXMoaGl0Tm90ZXMpO1xuICAgICAgICAgICAgcG9zaXRpb25zLmZvckVhY2goKGopID0+IG5vdGVMYWJlbHMucHVzaChuZXcgTm90ZUxhYmVsKHNxLCBqKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub3RlTGFiZWxzO1xuICAgIH1cblxuICAgIGZpbmRJbnZhbGlkU3Vic2V0KCkge1xuICAgICAgICBjb25zb2xlLnRpbWUoXCJmaW5kSW52YWxpZFN1YnNldFwiKTtcbiAgICAgICAgZm9yIChjb25zdCBzcSBvZiBzcXMuYWxsLmZpbHRlcigoc3EpID0+IHRoaXMuaGFzTm9WYWx1ZShzcSkpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXROb3RlcyhzcSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEludmFsaWRSZXBvcnQoW10sIFtzcV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IHN1YnNldFNpemUgPSAyOyBzdWJzZXRTaXplIDwgOTsgc3Vic2V0U2l6ZSsrKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2Ygc3FzLmhvdXNlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGl2ZVNxdWFyZXMgPSBsaW5lLmZpbHRlcigoc3EpID0+IHRoaXMuaGFzTm9WYWx1ZShzcSkpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Vic2V0cyBvZiBjbWIuYmlwYXJ0aXRpb25zKGFjdGl2ZVNxdWFyZXMsIHN1YnNldFNpemUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1YnNldFNxdWFyZXMgPSBzdWJzZXRzWzBdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJzZXROb3RlcyA9IHRoaXMubm90ZVVuaW9uKHN1YnNldFNxdWFyZXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYml0LmNvdW50KHN1YnNldE5vdGVzKSA8IHN1YnNldFNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUudGltZUVuZChcImZpbmRJbnZhbGlkU3Vic2V0XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBJbnZhbGlkUmVwb3J0KGxpbmUsIHN1YnNldFNxdWFyZXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUudGltZUVuZChcImZpbmRJbnZhbGlkU3Vic2V0XCIpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iLCJjb25zdCBNYXhOdW1iZXJTYXZlZEdhbWVzID0gMTAwO1xubGV0IHN0YXJ0UG9zaXRpb247XG5sZXQgZ2FtZVBvc2l0aW9uUHRyO1xuY29uc3QgZ2FtZVBvc2l0aW9ucyA9IFtdO1xuXG5mdW5jdGlvbiBnZXRTdGFydFBvc2l0aW9uKCkge1xuICAgIHJldHVybiBzdGFydFBvc2l0aW9uO1xufVxuXG5mdW5jdGlvbiBzYXZlU3RhcnQoYm9hcmQpIHtcbiAgICBzdGFydFBvc2l0aW9uID0gYm9hcmQuY2xvbmVWYWx1ZXMoKTtcbiAgICBnYW1lUG9zaXRpb25zLmxlbmd0aCA9IDA7XG4gICAgZ2FtZVBvc2l0aW9uUHRyID0gLTE7XG4gICAgc2F2ZUdhbWUoYm9hcmQpO1xufVxuXG5mdW5jdGlvbiBsb2FkU3RhcnQoYm9hcmQpIHtcbiAgICB0cnkge1xuICAgICAgICBib2FyZC51cGxvYWRWYWx1ZXMoc3RhcnRQb3NpdGlvbik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBDb3VsZCBub3QgbG9hZCBzdGFydCBwb3NpdGlvbiFcXG4ke2V9YCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzYXZlR2FtZShib2FyZCkge1xuICAgIHdoaWxlIChnYW1lUG9zaXRpb25zLmxlbmd0aCA+PSBNYXhOdW1iZXJTYXZlZEdhbWVzKSB7XG4gICAgICAgIGdhbWVQb3NpdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgZ2FtZVBvc2l0aW9uUHRyIC09IDE7XG4gICAgfVxuICAgIGdhbWVQb3NpdGlvbnMubGVuZ3RoID0gZ2FtZVBvc2l0aW9uUHRyICsgMTtcbiAgICBnYW1lUG9zaXRpb25zLnB1c2goYm9hcmQuY2xvbmVBbGwoKSk7XG4gICAgZ2FtZVBvc2l0aW9uUHRyICs9IDE7XG59XG5cbmZ1bmN0aW9uIGJhY2tHYW1lKGJvYXJkKSB7XG4gICAgaWYgKGdhbWVQb3NpdGlvblB0ciA9PT0gMCkgcmV0dXJuO1xuICAgIGdhbWVQb3NpdGlvblB0ciAtPSAxO1xuICAgIHRyeSB7XG4gICAgICAgIGJvYXJkLnVwbG9hZEFsbChnYW1lUG9zaXRpb25zW2dhbWVQb3NpdGlvblB0cl0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgQ291bGQgbm90IGxvYWQgcG9zaXRpb24gaW4gYmFja0dhbWUhXFxuJHtlfWApO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZm9yd2FyZEdhbWUoYm9hcmQpIHtcbiAgICBpZiAoZ2FtZVBvc2l0aW9ucy5sZW5ndGggPT09IGdhbWVQb3NpdGlvblB0ciArIDEpIHJldHVybjtcbiAgICBnYW1lUG9zaXRpb25QdHIgKz0gMTtcbiAgICB0cnkge1xuICAgICAgICBib2FyZC51cGxvYWRBbGwoZ2FtZVBvc2l0aW9uc1tnYW1lUG9zaXRpb25QdHJdKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYENvdWxkIG5vdCBsb2FkIHBvc2l0aW9uIGluIGZvcndhcmRHYW1lIVxcbiR7ZX1gKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBmaWxlID0ge1xuICAgIGdldFN0YXJ0UG9zaXRpb24sXG4gICAgc2F2ZVN0YXJ0LFxuICAgIGxvYWRTdGFydCxcbiAgICBzYXZlR2FtZSxcbiAgICBiYWNrR2FtZSxcbiAgICBmb3J3YXJkR2FtZSxcbn07XG4iLCJpbXBvcnQgeyBzcXMgfSBmcm9tIFwiLi9tb2RzL21vZC1zcXMuanNcIjtcbmltcG9ydCB7IGdldFN0YXRlLCBidXR0b25BY3Rpb24gfSBmcm9tIFwiLi9jb250cm9sLmpzXCI7XG5cbmNvbnN0IGdyaWROb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5ncmlkXCIpO1xuY29uc3QgYnV0dG9uc05vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmJ1dHRvbkNvbnRhaW5lclwiKTtcbmNvbnN0IG1lc3NhZ2VOb2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtZXNzYWdlXCIpO1xuY29uc3QgZGVzY3JpcHRpb25Ob2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkZXNjcmlwdGlvblwiKTtcblxubGV0IGludmFsaWREaXNwbGF5ZWQgPSBudWxsO1xubGV0IG1vdmVEaXNwbGF5ZWQgPSBudWxsO1xuXG5mdW5jdGlvbiBkaXNwbGF5Qm9hcmQoYm9hcmQpIHtcbiAgICBncmlkTm9kZS5pbm5lckhUTUwgPSBcIlwiO1xuXG4gICAgZm9yIChjb25zdCBpIG9mIHNxcy5hbGwpIHtcbiAgICAgICAgY29uc3QgbmV3Q2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIG5ld0NlbGwuY2xhc3NMaXN0LmFkZChcImNlbGxcIik7XG4gICAgICAgIG5ld0NlbGwuY2xhc3NMaXN0LmFkZChgcm93JHtzcXMucm93T2YoaSl9YCk7XG4gICAgICAgIG5ld0NlbGwuY2xhc3NMaXN0LmFkZChgY29sJHtzcXMuY29sdW1uT2YoaSl9YCk7XG5cbiAgICAgICAgaWYgKGJvYXJkLmhhc1ZhbHVlKGkpKSB7XG4gICAgICAgICAgICBuZXdDZWxsLmNsYXNzTGlzdC5hZGQoXCJ2YWx1ZVwiKTtcbiAgICAgICAgICAgIG5ld0NlbGwuaW5uZXJUZXh0ID0gYm9hcmQuZ2V0VmFsdWUoaSk7XG4gICAgICAgICAgICBuZXdDZWxsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgICAgICAgICAgIHN0YXRlLnZhbHVlQ2xpY2soaSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5ld0NlbGwuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgICAgICBzdGF0ZS52YWx1ZUNsaWNrUmlnaHQoaSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0NlbGwuY2xhc3NMaXN0LmFkZChcIm5vdGVzXCIpO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDE7IGogPD0gOTsgaisrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3Tm90ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgICAgICAgICAgbmV3Tm90ZS5jbGFzc0xpc3QuYWRkKFwibm90ZVwiKTtcbiAgICAgICAgICAgICAgICBuZXdOb3RlLmlubmVyVGV4dCA9IGo7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kaWNhdG9yID0gYm9hcmQuaGFzTm90ZShpLCBqKSA/IFwieWVzXCIgOiBcIm5vXCI7XG4gICAgICAgICAgICAgICAgbmV3Tm90ZS5jbGFzc0xpc3QuYWRkKGluZGljYXRvcik7XG4gICAgICAgICAgICAgICAgbmV3Tm90ZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZSA9IGdldFN0YXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChib2FyZC5oYXNOb3RlKGksIGopKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5wcmVzZW50Tm90ZUNsaWNrKGksIGopO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubWlzc2luZ05vdGVDbGljayhpLCBqKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG5ld05vdGUuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRleHRtZW51XCIsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYm9hcmQuaGFzTm90ZShpLCBqKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUucHJlc2VudE5vdGVDbGlja1JpZ2h0KGksIGopO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubWlzc2luZ05vdGVDbGlja1JpZ2h0KGksIGopO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbmV3Q2VsbC5hcHBlbmRDaGlsZChuZXdOb3RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBncmlkTm9kZS5hcHBlbmRDaGlsZChuZXdDZWxsKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXlCdXR0b25zKGJ1dHRvblRleHRzKSB7XG4gICAgYnV0dG9uc05vZGUuaW5uZXJIVE1MID0gXCJcIjtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBidXR0b25UZXh0cykge1xuICAgICAgICBjb25zdCBuZXdCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBuZXdCdXR0b24uY2xhc3NMaXN0LmFkZChcImJ1dHRvblwiKTtcbiAgICAgICAgbmV3QnV0dG9uLmlubmVyVGV4dCA9IGJ1dHRvbjtcbiAgICAgICAgbmV3QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICBidXR0b25BY3Rpb25bYnV0dG9uXSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgYnV0dG9uc05vZGUuYXBwZW5kQ2hpbGQobmV3QnV0dG9uKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXlNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICBtZXNzYWdlTm9kZS5pbm5lclRleHQgPSBtZXNzYWdlO1xufVxuXG5mdW5jdGlvbiBkaXNwbGF5RGVzY3JpcHRpb24oZGVzY3JpcHRpb24pIHtcbiAgICBkZXNjcmlwdGlvbk5vZGUuaW5uZXJUZXh0ID0gZGVzY3JpcHRpb247XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXlNb3ZlKG1vdmUpIHtcbiAgICBpZiAoIW1vdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHNxIG9mIG1vdmUubGluZVNxcykge1xuICAgICAgICBncmlkTm9kZS5jaGlsZHJlbltzcV0uY2xhc3NMaXN0LmFkZChcIm1vdmUtbGluZVwiKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXlOb3RlIG9mIG1vdmUua2V5Tm90ZXMpIHtcbiAgICAgICAgY29uc3QgY2VsbE5vZGUgPSBncmlkTm9kZS5jaGlsZHJlbltrZXlOb3RlLmNlbGxdO1xuICAgICAgICBjZWxsTm9kZS5jaGlsZHJlbltrZXlOb3RlLm5vdGUgLSAxXS5jbGFzc0xpc3QuYWRkKFwibW92ZS1rZXlub3RlXCIpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGRlYWROb3RlIG9mIG1vdmUuZGVhZE5vdGVzKSB7XG4gICAgICAgIGNvbnN0IGNlbGxOb2RlID0gZ3JpZE5vZGUuY2hpbGRyZW5bZGVhZE5vdGUuY2VsbF07XG4gICAgICAgIGNlbGxOb2RlLmNoaWxkcmVuW2RlYWROb3RlLm5vdGUgLSAxXS5jbGFzc0xpc3QuYWRkKFwibW92ZS1kZWFkbm90ZVwiKTtcbiAgICB9XG4gICAgbW92ZURpc3BsYXllZCA9IG1vdmU7XG59XG5cbmZ1bmN0aW9uIGRpc3BsYXlNb3ZlTGluZVNxcyhtb3ZlKSB7XG4gICAgaWYgKCFtb3ZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChjb25zdCBzcSBvZiBtb3ZlLmxpbmVTcXMpIHtcbiAgICAgICAgZ3JpZE5vZGUuY2hpbGRyZW5bc3FdLmNsYXNzTGlzdC5hZGQoXCJtb3ZlLWxpbmVcIik7XG4gICAgfVxuICAgIG1vdmVEaXNwbGF5ZWQgPSBtb3ZlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVNb3ZlKCkge1xuICAgIGlmICghbW92ZURpc3BsYXllZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKG1vdmVEaXNwbGF5ZWQpO1xuICAgIGZvciAoY29uc3Qgc3Egb2YgbW92ZURpc3BsYXllZC5saW5lU3FzKSB7XG4gICAgICAgIGdyaWROb2RlLmNoaWxkcmVuW3NxXS5jbGFzc0xpc3QucmVtb3ZlKFwibW92ZS1saW5lXCIpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleU5vdGUgb2YgbW92ZURpc3BsYXllZC5rZXlOb3Rlcykge1xuICAgICAgICBjb25zdCBjZWxsTm9kZSA9IGdyaWROb2RlLmNoaWxkcmVuW2tleU5vdGUuY2VsbF07XG4gICAgICAgIGlmIChjZWxsTm9kZS5jbGFzc0xpc3QuY29udGFpbnMoXCJ2YWx1ZVwiKSkgYnJlYWs7XG4gICAgICAgIGNvbnNvbGUubG9nKGtleU5vdGUuY2VsbCwgY2VsbE5vZGUpO1xuICAgICAgICBjb25zb2xlLmxvZyhrZXlOb3RlLm5vdGUpO1xuICAgICAgICBjZWxsTm9kZS5jaGlsZHJlbltrZXlOb3RlLm5vdGUgLSAxXS5jbGFzc0xpc3QucmVtb3ZlKFwibW92ZS1rZXlub3RlXCIpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgZGVhZE5vdGUgb2YgbW92ZURpc3BsYXllZC5kZWFkTm90ZXMpIHtcbiAgICAgICAgY29uc3QgY2VsbE5vZGUgPSBncmlkTm9kZS5jaGlsZHJlbltkZWFkTm90ZS5jZWxsXTtcbiAgICAgICAgaWYgKGNlbGxOb2RlLmNsYXNzTGlzdC5jb250YWlucyhcInZhbHVlXCIpKSBicmVhaztcbiAgICAgICAgY2VsbE5vZGUuY2hpbGRyZW5bZGVhZE5vdGUubm90ZSAtIDFdLmNsYXNzTGlzdC5yZW1vdmUoXCJtb3ZlLWRlYWRub3RlXCIpO1xuICAgIH1cbiAgICBtb3ZlRGlzcGxheWVkID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZGlzcGxheUludmFsaWQocmVwb3J0KSB7XG4gICAgaWYgKCFyZXBvcnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNlbGwgb2YgcmVwb3J0LmxpbmUpIHtcbiAgICAgICAgZ3JpZE5vZGUuY2hpbGRyZW5bY2VsbF0uY2xhc3NMaXN0LmFkZChcImludmFsaWQtbGluZVwiKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBjZWxsIG9mIHJlcG9ydC5zcXVhcmVzKSB7XG4gICAgICAgIGdyaWROb2RlLmNoaWxkcmVuW2NlbGxdLmNsYXNzTGlzdC5hZGQoXCJpbnZhbGlkLXNxdWFyZVwiKTtcbiAgICB9XG4gICAgaW52YWxpZERpc3BsYXllZCA9IHJlcG9ydDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSW52YWxpZCgpIHtcbiAgICBpZiAoIWludmFsaWREaXNwbGF5ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNlbGwgb2YgaW52YWxpZERpc3BsYXllZC5saW5lKSB7XG4gICAgICAgIGdyaWROb2RlLmNoaWxkcmVuW2NlbGxdLmNsYXNzTGlzdC5yZW1vdmUoXCJpbnZhbGlkLWxpbmVcIik7XG4gICAgfVxuICAgIGZvciAoY29uc3QgY2VsbCBvZiBpbnZhbGlkRGlzcGxheWVkLnNxdWFyZXMpIHtcbiAgICAgICAgZ3JpZE5vZGUuY2hpbGRyZW5bY2VsbF0uY2xhc3NMaXN0LnJlbW92ZShcImludmFsaWQtc3F1YXJlXCIpO1xuICAgIH1cbiAgICBpbnZhbGlkRGlzcGxheWVkID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZGlzcGxheUFkZE5vdGUoaSwgaikge1xuICAgIGNvbnN0IG5vdGVOb2RlID0gZ3JpZE5vZGUuY2hpbGRyZW5baV0uY2hpbGRyZW5baiAtIDFdO1xuICAgIG5vdGVOb2RlLmNsYXNzTGlzdC5yZW1vdmUoXCJub1wiKTtcbiAgICBub3RlTm9kZS5jbGFzc0xpc3QuYWRkKFwieWVzXCIpO1xufVxuXG5mdW5jdGlvbiBkaXNwbGF5UmVtb3ZlTm90ZShpLCBqKSB7XG4gICAgY29uc3Qgbm90ZU5vZGUgPSBncmlkTm9kZS5jaGlsZHJlbltpXS5jaGlsZHJlbltqIC0gMV07XG4gICAgbm90ZU5vZGUuY2xhc3NMaXN0LnJlbW92ZShcInllc1wiKTtcbiAgICBub3RlTm9kZS5jbGFzc0xpc3QuYWRkKFwibm9cIik7XG59XG5cbmV4cG9ydCBjb25zdCBkb20gPSB7XG4gICAgZGlzcGxheUJvYXJkLFxuICAgIGRpc3BsYXlCdXR0b25zLFxuICAgIGRpc3BsYXlNZXNzYWdlLFxuICAgIGRpc3BsYXlEZXNjcmlwdGlvbixcbiAgICBkaXNwbGF5TW92ZSxcbiAgICBkaXNwbGF5TW92ZUxpbmVTcXMsXG4gICAgcmVtb3ZlTW92ZSxcbiAgICBkaXNwbGF5SW52YWxpZCxcbiAgICByZW1vdmVJbnZhbGlkLFxuICAgIGRpc3BsYXlBZGROb3RlLFxuICAgIGRpc3BsYXlSZW1vdmVOb3RlLFxufTtcbiIsImV4cG9ydCBjbGFzcyBNb3ZlIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBoaW50LCBkZXNjcmlwdGlvbiwgbGluZVNxcywga2V5Tm90ZXMsIGRlYWROb3Rlcykge1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLmhpbnQgPSBoaW50O1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMubGluZVNxcyA9IGxpbmVTcXM7XG4gICAgICAgIHRoaXMua2V5Tm90ZXMgPSBrZXlOb3RlcztcbiAgICAgICAgdGhpcy5kZWFkTm90ZXMgPSBkZWFkTm90ZXM7XG4gICAgfVxufSIsImltcG9ydCB7IHNxcyB9IGZyb20gXCIuLi9tb2RzL21vZC1zcXMuanNcIjtcbmltcG9ydCB7IGJpdCB9IGZyb20gXCIuLi9tb2RzL21vZC1iaXQuanNcIjtcbmltcG9ydCB7IGNtYiB9IGZyb20gXCIuLi9tb2RzL21vZC1jbWIuanNcIjtcbmltcG9ydCB7IE1vdmUgfSBmcm9tIFwiLi9jbGFzcy1Nb3ZlLmpzXCI7XG5cbmV4cG9ydCB7IG5ha2VkMSwgbmFrZWQyMzQgfTtcblxuZnVuY3Rpb24gbmFrZWQxKGJvYXJkKSB7XG4gICAgY29uc3QgbW92ZXNGb3VuZCA9IFtdO1xuXG4gICAgY29uc3QgbmFrZWRTcXVhcmVzID0gc3FzLmFsbC5maWx0ZXIoKGkpID0+IGJvYXJkLm5vdGVDb3VudChpKSA9PT0gMSk7XG4gICAgZm9yIChjb25zdCBzcSBvZiBuYWtlZFNxdWFyZXMpIHtcbiAgICAgICAgY29uc3QgbmV3TW92ZSA9IG5ldyBNb3ZlKFxuICAgICAgICAgICAgYE5ha2VkIFNpbmdsZWAsXG4gICAgICAgICAgICBgTG9vayBmb3IgYSBjZWxsIHdpdGggb25seSBvbmUgcG9zc2libGUgdmFsdWVgLFxuICAgICAgICAgICAgYFRoaXMgY2VsbCBoYXMgb25seSBvbmUgbm90ZSAtIHRoYXQgbXVzdCBiZSBpdHMgdmFsdWUhYCxcbiAgICAgICAgICAgIFtzcV0sXG4gICAgICAgICAgICBib2FyZC5jcmVhdGVOb3RlTGFiZWxzKFtzcV0sIGJpdC5hbGxOb3RlcyksXG4gICAgICAgICAgICBbXSxcbiAgICAgICAgKTtcbiAgICAgICAgbW92ZXNGb3VuZC5wdXNoKG5ld01vdmUpO1xuICAgIH1cblxuICAgIHJldHVybiBtb3Zlc0ZvdW5kO1xufVxuXG5jb25zdCBudW1iZXJXb3JkID0geyAxOiBcIlNpbmdsZVwiLCAyOiBcIkRvdWJsZVwiLCAzOiBcIlRyaXBsZVwiLCA0OiBcIlF1YWRydXBsZVwiIH07XG5cbmZ1bmN0aW9uIG5ha2VkMjM0KGJvYXJkLCBuKSB7XG4gICAgY29uc29sZS5hc3NlcnQobiA+PSAyICYmIG4gPD0gNCwgXCJJbnZhbGlkIGFyZ3VtZW50IHRvIG5ha2VkMjM0XCIpO1xuICAgIGNvbnN0IG1vdmVzRm91bmQgPSBbXTtcblxuICAgIGZvciAoY29uc3QgaG91c2Ugb2Ygc3FzLmhvdXNlcykge1xuICAgICAgICBjb25zdCBhY3RpdmVTcXVhcmVzID0gaG91c2UuZmlsdGVyKChpKSA9PiBib2FyZC5oYXNOb1ZhbHVlKGkpKTtcblxuICAgICAgICAvLyBUbyBhdm9pZCByZXBsaWNhdGlvbiBiZXR3ZWVuIG5ha2VkIGFuZCBoaWRkZW5zXG4gICAgICAgIGlmIChuID4gTWF0aC5mbG9vcihhY3RpdmVTcXVhcmVzLmxlbmd0aCAvIDIpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGNvdWxkIHJlbW92ZSBNYXRoLmZsb29yP1xuXG4gICAgICAgIGZvciAoY29uc3Qgc3Vic2V0cyBvZiBjbWIuYmlwYXJ0aXRpb25zKGFjdGl2ZVNxdWFyZXMsIG4pKSB7XG4gICAgICAgICAgICBjb25zdCBbc3Vic2V0QSwgc3Vic2V0Ql0gPSBzdWJzZXRzO1xuICAgICAgICAgICAgY29uc3Qgc3Vic2V0QU5vdGVzID0gYm9hcmQubm90ZVVuaW9uKHN1YnNldEEpO1xuICAgICAgICAgICAgaWYgKGJpdC5jb3VudChzdWJzZXRBTm90ZXMpID4gbikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3Vic2V0Qk5vdGVzID0gYm9hcmQubm90ZVVuaW9uKHN1YnNldEIpO1xuICAgICAgICAgICAgaWYgKChzdWJzZXRCTm90ZXMgJiBzdWJzZXRBTm90ZXMpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuZXdNb3ZlID0gbmV3IE1vdmUoXG4gICAgICAgICAgICAgICAgYE5ha2VkICR7bnVtYmVyV29yZFtuXX1gLFxuICAgICAgICAgICAgICAgIGBMb29rIGZvciAke259IGNlbGxzIHdoaWNoIGNhbiBvbmx5IHRha2UgJHtufSB2YWx1ZXMgYmV0d2VlbiB0aGVtYCxcbiAgICAgICAgICAgICAgICBgVGhlcmUgYXJlIG9ubHkgJHtufSBwb3NzaWJsZSB2YWx1ZXMgYWNyb3NzICR7bn0gY2VsbHMgc28gdGhlIHZhbHVlcyBjYW5ub3QgYmUgdXNlZCBlbHNld2hlcmUgaW4gdGhlIGhvdXNlYCxcbiAgICAgICAgICAgICAgICBob3VzZSxcbiAgICAgICAgICAgICAgICBib2FyZC5jcmVhdGVOb3RlTGFiZWxzKHN1YnNldEEsIHN1YnNldEFOb3RlcyksXG4gICAgICAgICAgICAgICAgYm9hcmQuY3JlYXRlTm90ZUxhYmVscyhzdWJzZXRCLCBzdWJzZXRBTm90ZXMpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG1vdmVzRm91bmQucHVzaChuZXdNb3ZlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtb3Zlc0ZvdW5kO1xufVxuIiwiaW1wb3J0IHsgc3FzIH0gZnJvbSBcIi4uL21vZHMvbW9kLXNxcy5qc1wiO1xuaW1wb3J0IHsgYml0IH0gZnJvbSBcIi4uL21vZHMvbW9kLWJpdC5qc1wiO1xuaW1wb3J0IHsgY21iIH0gZnJvbSBcIi4uL21vZHMvbW9kLWNtYi5qc1wiO1xuaW1wb3J0IHsgTW92ZSB9IGZyb20gXCIuL2NsYXNzLU1vdmUuanNcIjtcblxuZXhwb3J0IHsgaGlkZGVuMTIzNCB9O1xuXG5jb25zdCBudW1iZXJXb3JkID0geyAxOiBcIlNpbmdsZVwiLCAyOiBcIkRvdWJsZVwiLCAzOiBcIlRyaXBsZVwiLCA0OiBcIlF1YWRydXBsZVwiIH07XG5cbmZ1bmN0aW9uIGhpZGRlbjEyMzQoYm9hcmQsIG4pIHtcbiAgICBjb25zb2xlLmFzc2VydChuID49IDEgJiYgbiA8PSA0LCBcIkludmFsaWQgYXJndW1lbnQgdG8gaGlkZGVuMTIzNFwiKTtcbiAgICBjb25zdCBtb3Zlc0ZvdW5kID0gW107XG4gICAgY29uc3QgaGludCA9XG4gICAgICAgIG4gPT09IDFcbiAgICAgICAgICAgID8gXCJMb29rIGZvciBhIG5vdGUgd2hpY2ggaXMgb25seSBpbiBvbmUgY2VsbCBvZiBpdHMgaG91c2VcIlxuICAgICAgICAgICAgOiBgTG9vayBmb3IgJHtufSBub3RlcyB3aGljaCBhcmUgaW4gb25seSAke259IGNlbGxzIG9mIHRoZSBob3VzZWA7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPVxuICAgICAgICBuID09PSAxXG4gICAgICAgICAgICA/IFwiVGhpcyB2YWx1ZSBtdXN0IGJlIGluIHRoaXMgY2VsbCwgc28gbm8gb3RoZXIgdmFsdWUgaXMgcG9zc2libGUgaGVyZVwiXG4gICAgICAgICAgICA6IGBUaGVzZSAke259IHZhbHVlcyBtdXN0IGJlIGluIHRoZXNlICR7bn0gY2VsbHMsIHNvIG5vIG90aGVyIHZhbHVlcyBhcmUgcG9zc2libGVgO1xuXG4gICAgZm9yIChjb25zdCBob3VzZSBvZiBzcXMuaG91c2VzKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVNxdWFyZXMgPSBob3VzZS5maWx0ZXIoKGkpID0+IGJvYXJkLmhhc05vVmFsdWUoaSkpO1xuICAgICAgICBjb25zdCBsZW4gPSBhY3RpdmVTcXVhcmVzLmxlbmd0aDtcblxuICAgICAgICAvLyBUbyBhdm9pZCByZXBsaWNhdGlvbiBiZXR3ZWVuIG5ha2VkIGFuZCBoaWRkZW5zXG4gICAgICAgIGlmIChuID4gTWF0aC5mbG9vcigobGVuIC0gMSkgLyAyKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY291bGQgcmVtb3ZlIE1hdGguZmxvb3I/XG4gICAgICAgIFxuXG4gICAgICAgIGZvciAoY29uc3Qgc3Vic2V0cyBvZiBjbWIuYmlwYXJ0aXRpb25zKGFjdGl2ZVNxdWFyZXMsIGxlbiAtIG4pKSB7XG4gICAgICAgICAgICBjb25zdCBbc3Vic2V0QSwgc3Vic2V0Ql0gPSBzdWJzZXRzO1xuICAgICAgICAgICAgY29uc3Qgc3Vic2V0QU5vdGVzID0gYm9hcmQubm90ZVVuaW9uKHN1YnNldEEpO1xuICAgICAgICAgICAgaWYgKGJpdC5jb3VudChzdWJzZXRBTm90ZXMpID4gbGVuIC0gbikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3Vic2V0Qk5vdGVzID0gYm9hcmQubm90ZVVuaW9uKHN1YnNldEIpO1xuICAgICAgICAgICAgaWYgKChzdWJzZXRCTm90ZXMgJiBzdWJzZXRBTm90ZXMpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld01vdmUgPSBuZXcgTW92ZShcbiAgICAgICAgICAgICAgICBgSGlkZGVuICR7bnVtYmVyV29yZFtuXX1gLFxuICAgICAgICAgICAgICAgIGhpbnQsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgaG91c2UsXG4gICAgICAgICAgICAgICAgYm9hcmQuY3JlYXRlTm90ZUxhYmVscyhzdWJzZXRCLCBiaXQubm90KHN1YnNldEFOb3RlcykpLFxuICAgICAgICAgICAgICAgIGJvYXJkLmNyZWF0ZU5vdGVMYWJlbHMoc3Vic2V0Qiwgc3Vic2V0QU5vdGVzKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBtb3Zlc0ZvdW5kLnB1c2gobmV3TW92ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbW92ZXNGb3VuZDtcbn1cbiIsImltcG9ydCB7IHNxcyB9IGZyb20gXCIuLi9tb2RzL21vZC1zcXMuanNcIjtcbmltcG9ydCB7IGJpdCB9IGZyb20gXCIuLi9tb2RzL21vZC1iaXQuanNcIjtcbmltcG9ydCB7IE1vdmUgfSBmcm9tIFwiLi9jbGFzcy1Nb3ZlLmpzXCI7XG5cblxuZXhwb3J0IHsgcG9pbnRpbmcsIGNsYWltaW5nIH07XG5cbmNvbnN0IHBvaW50aW5nVHJpcGxlcyA9IGJsb2NrQW5kTGluZVRyaXBsZXMoc3FzLnJvd09mKS5jb25jYXQoXG4gICAgYmxvY2tBbmRMaW5lVHJpcGxlcyhzcXMuY29sdW1uT2YpLFxuKTtcblxuZnVuY3Rpb24gcG9pbnRpbmcoYm9hcmQpIHtcbiAgICBjb25zdCBtb3Zlc0ZvdW5kID0gW107XG4gICAgZm9yIChjb25zdCB0cmlwbGUgb2YgcG9pbnRpbmdUcmlwbGVzKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUJsb2NrQW5kTGluZSA9IHRyaXBsZVswXS5maWx0ZXIoKGkpID0+IGJvYXJkLmhhc05vVmFsdWUoaSkpO1xuICAgICAgICBjb25zdCBhY3RpdmVCbG9ja09ubHkgPSB0cmlwbGVbMV0uZmlsdGVyKChpKSA9PiBib2FyZC5oYXNOb1ZhbHVlKGkpKTtcbiAgICAgICAgY29uc3QgYWN0aXZlTGluZU9ubHkgPSB0cmlwbGVbMl0uZmlsdGVyKChpKSA9PiBib2FyZC5oYXNOb1ZhbHVlKGkpKTtcblxuICAgICAgICBjb25zdCBibG9ja0FuZExpbmVOb3RlcyA9IGJvYXJkLm5vdGVVbmlvbihhY3RpdmVCbG9ja0FuZExpbmUpO1xuICAgICAgICBjb25zdCBibG9ja09ubHlOb3RlcyA9IGJvYXJkLm5vdGVVbmlvbihhY3RpdmVCbG9ja09ubHkpO1xuICAgICAgICBjb25zdCBsaW5lT25seU5vdGVzID0gYm9hcmQubm90ZVVuaW9uKGFjdGl2ZUxpbmVPbmx5KTtcblxuICAgICAgICBjb25zdCB0YXJnZXROb3RlcyA9IGJsb2NrQW5kTGluZU5vdGVzICYgbGluZU9ubHlOb3RlcyAmIGJpdC5ub3QoYmxvY2tPbmx5Tm90ZXMpO1xuICAgICAgICBjb25zdCBudW1UYXJnZXROb3RlcyA9IGJpdC5jb3VudCh0YXJnZXROb3Rlcyk7XG5cbiAgICAgICAgLy8gZXhjbHVkZSAxIHRhcmdldCBub3RlIC0gdGhpcyB3aWxsIGJlIHNwb3R0ZWQgYnkgaGlkZGVuIHNpbmdsZVxuICAgICAgICBpZiAobnVtVGFyZ2V0Tm90ZXMgPiAxKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdNb3ZlID0gbmV3IE1vdmUoXG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lLCAvL2BQb2ludGluZ2AsXG4gICAgICAgICAgICAgICAgXCJMb29rIGZvciBibG9jayBub3RlcyByZXN0cmljdGVkIHRvIGEgc2luZ2xlIGxpbmVcIixcbiAgICAgICAgICAgICAgICBcIkJsb2NrIHZhbHVlcyByZXN0cmljdGVkIHRvIGEgbGluZSBjYW4gYmUgcmVtb3ZlZCBmcm9tIG90aGVyIGxpbmUgY2VsbHNcIixcbiAgICAgICAgICAgICAgICB0cmlwbGUuZmxhdCgpLFxuICAgICAgICAgICAgICAgIGJvYXJkLmNyZWF0ZU5vdGVMYWJlbHMoYWN0aXZlQmxvY2tBbmRMaW5lLCB0YXJnZXROb3RlcyksXG4gICAgICAgICAgICAgICAgYm9hcmQuY3JlYXRlTm90ZUxhYmVscyhhY3RpdmVMaW5lT25seSwgdGFyZ2V0Tm90ZXMpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG1vdmVzRm91bmQucHVzaChuZXdNb3ZlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbW92ZXNGb3VuZDtcbn1cblxuZnVuY3Rpb24gY2xhaW1pbmcoYm9hcmQpIHtcbiAgICBjb25zdCBtb3Zlc0ZvdW5kID0gW107XG4gICAgZm9yIChjb25zdCB0cmlwbGUgb2YgcG9pbnRpbmdUcmlwbGVzKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUJsb2NrQW5kTGluZSA9IHRyaXBsZVswXS5maWx0ZXIoKGkpID0+IGJvYXJkLmhhc05vVmFsdWUoaSkpO1xuICAgICAgICBjb25zdCBhY3RpdmVCbG9ja09ubHkgPSB0cmlwbGVbMV0uZmlsdGVyKChpKSA9PiBib2FyZC5oYXNOb1ZhbHVlKGkpKTtcbiAgICAgICAgY29uc3QgYWN0aXZlTGluZU9ubHkgPSB0cmlwbGVbMl0uZmlsdGVyKChpKSA9PiBib2FyZC5oYXNOb1ZhbHVlKGkpKTtcblxuICAgICAgICBjb25zdCBibG9ja0FuZExpbmVOb3RlcyA9IGJvYXJkLm5vdGVVbmlvbihhY3RpdmVCbG9ja0FuZExpbmUpO1xuICAgICAgICBjb25zdCBibG9ja09ubHlOb3RlcyA9IGJvYXJkLm5vdGVVbmlvbihhY3RpdmVCbG9ja09ubHkpO1xuICAgICAgICBjb25zdCBsaW5lT25seU5vdGVzID0gYm9hcmQubm90ZVVuaW9uKGFjdGl2ZUxpbmVPbmx5KTtcblxuICAgICAgICBjb25zdCB0YXJnZXROb3RlcyA9IGJsb2NrQW5kTGluZU5vdGVzICYgYml0Lm5vdChsaW5lT25seU5vdGVzKSAmIGJsb2NrT25seU5vdGVzO1xuICAgICAgICBjb25zdCBudW1UYXJnZXROb3RlcyA9IGJpdC5jb3VudCh0YXJnZXROb3Rlcyk7XG5cbiAgICAgICAgLy8gZXhjbHVkZSAxIHRhcmdldCBub3RlIC0gdGhpcyB3aWxsIGJlIHNwb3R0ZWQgYnkgaGlkZGVuIHNpbmdsZVxuICAgICAgICBpZiAobnVtVGFyZ2V0Tm90ZXMgPiAxKSB7XG4gICAgICAgICAgICBjb25zdCBuZXdNb3ZlID0gbmV3IE1vdmUoXG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lLCAvL2BDbGFpbWluZ2AsXG4gICAgICAgICAgICAgICAgXCJMb29rIGZvciBsaW5lIG5vdGVzIHJlc3RyaWN0ZWQgdG8gYSBzaW5nbGUgYmxvY2tcIixcbiAgICAgICAgICAgICAgICBcIkxpbmUgdmFsdWVzIHJlc3RyaWN0ZWQgdG8gYSBibG9jayBjYW4gYmUgcmVtb3ZlZCBmcm9tIG90aGVyIGJsb2NrIGNlbGxzXCIsXG4gICAgICAgICAgICAgICAgdHJpcGxlLmZsYXQoKSxcbiAgICAgICAgICAgICAgICBib2FyZC5jcmVhdGVOb3RlTGFiZWxzKGFjdGl2ZUJsb2NrQW5kTGluZSwgdGFyZ2V0Tm90ZXMpLFxuICAgICAgICAgICAgICAgIGJvYXJkLmNyZWF0ZU5vdGVMYWJlbHMoYWN0aXZlQmxvY2tPbmx5LCB0YXJnZXROb3RlcyksXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbW92ZXNGb3VuZC5wdXNoKG5ld01vdmUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtb3Zlc0ZvdW5kO1xufVxuXG4vLyB0cmlwbGU6IFtibG9jayZsaW5lXSwgW2Jsb2NrIG9ubHldLCBbbGluZSBvbmx5XVxuZnVuY3Rpb24gYmxvY2tBbmRMaW5lVHJpcGxlcyhsaW5lT2YpIHtcbiAgICBjb25zdCB0cmlwbGVzID0gW107XG4gICAgZm9yIChsZXQgYiA9IDA7IGIgPCA5OyBiKyspIHtcbiAgICAgICAgZm9yIChsZXQgbCA9IDA7IGwgPCA5OyBsKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRyaXBsZSA9IFtbXSwgW10sIFtdXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3Egb2Ygc3FzLmFsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNxTGluZSA9IGxpbmVPZihzcSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3FCbG9jayA9IHNxcy5ibG9ja09mKHNxKTtcbiAgICAgICAgICAgICAgICBpZiAoc3FCbG9jayA9PT0gYiAmJiBzcUxpbmUgPT09IGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpcGxlWzBdLnB1c2goc3EpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3FCbG9jayA9PT0gYikge1xuICAgICAgICAgICAgICAgICAgICB0cmlwbGVbMV0ucHVzaChzcSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzcUxpbmUgPT09IGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpcGxlWzJdLnB1c2goc3EpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0cmlwbGVbMF0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRyaXBsZXMucHVzaCh0cmlwbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cmlwbGVzO1xufVxuIiwiaW1wb3J0IHsgc3FzIH0gZnJvbSBcIi4uL21vZHMvbW9kLXNxcy5qc1wiO1xuaW1wb3J0IHsgYml0IH0gZnJvbSBcIi4uL21vZHMvbW9kLWJpdC5qc1wiO1xuaW1wb3J0IHsgY21iIH0gZnJvbSBcIi4uL21vZHMvbW9kLWNtYi5qc1wiO1xuaW1wb3J0IHsgTW92ZSB9IGZyb20gXCIuL2NsYXNzLU1vdmUuanNcIjtcblxuZXhwb3J0IHsgeFdpbmcgfTtcbmNvbnN0IHhXaW5nTmFtZXMgPSB7IDI6IFwiWC1XaW5nXCIsIDM6IFwiU3dvcmRmaXNoXCIsIDQ6IFwiSmVsbHlmaXNoXCIgfTtcblxuZnVuY3Rpb24geFdpbmcoYm9hcmQsIG4pIHtcbiAgICBjb25zdCBtb3Zlc0ZvdW5kID0gW107XG5cbiAgICAvLyBhc3N1bWUgcm93cyByZXN0cmljdGVkIGZpcnN0XG4gICAgZm9yIChsZXQgeCA9IDE7IHggPD0gOTsgeCsrKSB7XG4gICAgICAgIGNvbnN0IHJvd0JpbmFyaWVzID0gc3FzLnJvd3MubWFwKChyKSA9PiBzcXVhcmVzVG9Ob3RlVHJhY2UoYm9hcmQsIHIsIHgpKTtcbiAgICAgICAgY29uc3Qgcm93Tm90ZUNvdW50cyA9IHJvd0JpbmFyaWVzLm1hcCgoZSkgPT4gYml0LmNvdW50KGUpKTtcbiAgICAgICAgY29uc3QgcG90ZW50aWFsUm93SW5kaWNlcyA9IHJvd0JpbmFyaWVzXG4gICAgICAgICAgICAua2V5cygpXG4gICAgICAgICAgICAuZmlsdGVyKChpKSA9PiByb3dOb3RlQ291bnRzW2ldIDw9IG4gJiYgcm93Tm90ZUNvdW50c1tpXSA+PSAyKVxuICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgaWYgKHBvdGVudGlhbFJvd0luZGljZXMubGVuZ3RoIDwgbikgY29udGludWU7XG5cbiAgICAgICAgZm9yIChjb25zdCBjb21iIG9mIGNtYi5iaXBhcnRpdGlvbnMocG90ZW50aWFsUm93SW5kaWNlcywgbikpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFJvd0luZGljZXMgPSBjb21iWzBdO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0Um93QmluYXJpZXMgPSB0YXJnZXRSb3dJbmRpY2VzLm1hcCgoaSkgPT4gcm93QmluYXJpZXNbaV0pO1xuICAgICAgICAgICAgY29uc3QgdW5pb25UYXJnZXRSb3dzQmluYXJ5ID0gYml0LnVuaW9uKHRhcmdldFJvd0JpbmFyaWVzKTtcbiAgICAgICAgICAgIGlmIChiaXQuY291bnQodW5pb25UYXJnZXRSb3dzQmluYXJ5KSAhPT0gbikgY29udGludWU7XG5cbiAgICAgICAgICAgIGNvbnN0IHRhcmdldENvbHVtbkluZGljZXMgPSBiaXQub25lUG9zaXRpb25zRnJvbVplcm8odW5pb25UYXJnZXRSb3dzQmluYXJ5KTtcbiAgICAgICAgICAgIGNvbnN0IHsgY3Jvc3NDZWxscywgc3dlZXBDZWxscywgbGluZXMgfSA9IGdlbmVyYXRlQ2VsbHNGb3JYV2luZyhcbiAgICAgICAgICAgICAgICB0YXJnZXRSb3dJbmRpY2VzLFxuICAgICAgICAgICAgICAgIHRhcmdldENvbHVtbkluZGljZXMsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoKGJvYXJkLm5vdGVVbmlvbihzd2VlcENlbGxzKSAmIGJpdC5udGgoeCkpID09PSAwKSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgbmV3TW92ZSA9IG5ldyBNb3ZlKFxuICAgICAgICAgICAgICAgIGAke3hXaW5nTmFtZXNbbl19IFJvd3NgLFxuICAgICAgICAgICAgICAgIGBMb29rIGZvciBhIG5vdGUgaW4gJHtufSByb3dzIHRoYXQgaXMgcmVzdHJpY3RlZCB0byBvbmx5ICR7bn0gY29sdW1uc2AsXG4gICAgICAgICAgICAgICAgYFRoZSBub3RlIHZhbHVlIGZvciB0aGUgJHtufSBjb2x1bW5zIG11c3QgYmUgaW4gdGhlc2UgJHtufSByb3dzIG9ubHlgLFxuICAgICAgICAgICAgICAgIGxpbmVzLFxuICAgICAgICAgICAgICAgIGJvYXJkLmNyZWF0ZU5vdGVMYWJlbHMoY3Jvc3NDZWxscywgYml0Lm50aCh4KSksXG4gICAgICAgICAgICAgICAgYm9hcmQuY3JlYXRlTm90ZUxhYmVscyhzd2VlcENlbGxzLCBiaXQubnRoKHgpKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBtb3Zlc0ZvdW5kLnB1c2gobmV3TW92ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBub3cgZG8gY29sdW1ucyEhXG4gICAgZm9yIChsZXQgeCA9IDE7IHggPD0gOTsgeCsrKSB7XG4gICAgICAgIGNvbnN0IGNvbEJpbmFyaWVzID0gc3FzLmNvbHVtbnMubWFwKChjKSA9PiBzcXVhcmVzVG9Ob3RlVHJhY2UoYm9hcmQsIGMsIHgpKTtcbiAgICAgICAgY29uc3QgY29sTm90ZUNvdW50cyA9IGNvbEJpbmFyaWVzLm1hcCgoZSkgPT4gYml0LmNvdW50KGUpKTtcbiAgICAgICAgY29uc3QgcG90ZW50aWFsQ29sSW5kaWNlcyA9IGNvbEJpbmFyaWVzXG4gICAgICAgICAgICAua2V5cygpXG4gICAgICAgICAgICAuZmlsdGVyKChpKSA9PiBjb2xOb3RlQ291bnRzW2ldIDw9IG4gJiYgY29sTm90ZUNvdW50c1tpXSA+PSAyKVxuICAgICAgICAgICAgLnRvQXJyYXkoKTtcbiAgICAgICAgaWYgKHBvdGVudGlhbENvbEluZGljZXMubGVuZ3RoIDwgbikgY29udGludWU7XG5cbiAgICAgICAgZm9yIChjb25zdCBjb21iIG9mIGNtYi5iaXBhcnRpdGlvbnMocG90ZW50aWFsQ29sSW5kaWNlcywgbikpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldENvbEluZGljZXMgPSBjb21iWzBdO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0Q29sQmluYXJpZXMgPSB0YXJnZXRDb2xJbmRpY2VzLm1hcCgoaSkgPT4gY29sQmluYXJpZXNbaV0pO1xuICAgICAgICAgICAgY29uc3QgdW5pb25UYXJnZXRDb2xzQmluYXJ5ID0gYml0LnVuaW9uKHRhcmdldENvbEJpbmFyaWVzKTtcbiAgICAgICAgICAgIGlmIChiaXQuY291bnQodW5pb25UYXJnZXRDb2xzQmluYXJ5KSAhPT0gbikgY29udGludWU7XG5cbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFJvd0luZGljZXMgPSBiaXQub25lUG9zaXRpb25zRnJvbVplcm8odW5pb25UYXJnZXRDb2xzQmluYXJ5KTtcbiAgICAgICAgICAgIGNvbnN0IHsgY3Jvc3NDZWxscywgc3dlZXBDZWxscywgbGluZXMgfSA9IGdlbmVyYXRlQ2VsbHNGb3JYV2luZyhcbiAgICAgICAgICAgICAgICB0YXJnZXRSb3dJbmRpY2VzLFxuICAgICAgICAgICAgICAgIHRhcmdldENvbEluZGljZXMsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKChib2FyZC5ub3RlVW5pb24oc3dlZXBDZWxscykgJiBiaXQubnRoKHgpKSA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld01vdmUgPSBuZXcgTW92ZShcbiAgICAgICAgICAgICAgICBgJHt4V2luZ05hbWVzW25dfSBDb2x1bW5zYCxcbiAgICAgICAgICAgICAgICBgTG9vayBmb3IgYSBub3RlIGluICR7bn0gY29sdW1ucyB0aGF0IGlzIHJlc3RyaWN0ZWQgdG8gb25seSAke259IHJvd3NgLFxuICAgICAgICAgICAgICAgIGBUaGUgbm90ZSB2YWx1ZSBmb3IgdGhlICR7bn0gcm93cyBtdXN0IGJlIGluIHRoZXNlICR7bn0gY29sdW1ucyBvbmx5YCxcbiAgICAgICAgICAgICAgICBsaW5lcyxcbiAgICAgICAgICAgICAgICBib2FyZC5jcmVhdGVOb3RlTGFiZWxzKGNyb3NzQ2VsbHMsIGJpdC5udGgoeCkpLFxuICAgICAgICAgICAgICAgIGJvYXJkLmNyZWF0ZU5vdGVMYWJlbHMoc3dlZXBDZWxscywgYml0Lm50aCh4KSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbW92ZXNGb3VuZC5wdXNoKG5ld01vdmUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtb3Zlc0ZvdW5kO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUNlbGxzRm9yWFdpbmcocm93SW5kaWNlcywgY29sSW5kaWNlcywgaXNSb3dUeXBlKSB7XG4gICAgY29uc3QgY3Jvc3NDZWxscyA9IFtdO1xuICAgIGNvbnN0IHN3ZWVwQ2VsbHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHNxIG9mIHNxcy5hbGwpIHtcbiAgICAgICAgY29uc3Qgc3FSb3cgPSBzcXMucm93T2Yoc3EpO1xuICAgICAgICBjb25zdCBzcUNvbHVtbiA9IHNxcy5jb2x1bW5PZihzcSk7XG4gICAgICAgIGNvbnN0IGluVGFyZ2V0Um93cyA9IHJvd0luZGljZXMuaW5jbHVkZXMoc3FSb3cpO1xuICAgICAgICBjb25zdCBpblRhcmdldENvbHVtbnMgPSBjb2xJbmRpY2VzLmluY2x1ZGVzKHNxQ29sdW1uKTtcbiAgICAgICAgaWYgKGluVGFyZ2V0Um93cyAmJiBpblRhcmdldENvbHVtbnMpIHtcbiAgICAgICAgICAgIGNyb3NzQ2VsbHMucHVzaChzcSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNSb3dUeXBlICYmICFpblRhcmdldFJvd3MgJiYgaW5UYXJnZXRDb2x1bW5zKSB7XG4gICAgICAgICAgICBzd2VlcENlbGxzLnB1c2goc3EpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc1Jvd1R5cGUgJiYgaW5UYXJnZXRSb3dzICYmICFpblRhcmdldENvbHVtbnMpIHtcbiAgICAgICAgICAgIHN3ZWVwQ2VsbHMucHVzaChzcSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgcm93TGluZXMgPSByb3dJbmRpY2VzLm1hcCgoaSkgPT4gc3FzLnJvd3NbaV0pO1xuICAgIGNvbnN0IGNvbExpbmVzID0gY29sSW5kaWNlcy5tYXAoKGkpID0+IHNxcy5jb2x1bW5zW2ldKTtcbiAgICBjb25zdCBsaW5lcyA9IHJvd0xpbmVzLmNvbmNhdChjb2xMaW5lcykuZmxhdCgpO1xuICAgIHJldHVybiB7IGNyb3NzQ2VsbHMsIHN3ZWVwQ2VsbHMsIGxpbmVzIH07XG59XG5cbi8vIHJldHVybnMgYSBiaW5hcnkgaW5kaWNhdGluZyBwcmVzZW5jZSBvZiBzcGVjaWZpZWQgbm90ZVxuZnVuY3Rpb24gc3F1YXJlc1RvTm90ZVRyYWNlKGJvYXJkLCBzcXVhcmVzLCBub3RlKSB7XG4gICAgcmV0dXJuIHNxdWFyZXNcbiAgICAgICAgLm1hcCgoc3EsIGkpID0+IChib2FyZC5oYXNOb3RlKHNxLCBub3RlKSA/IDEgPDwgaSA6IDApKVxuICAgICAgICAucmVkdWNlKChhLCBiKSA9PiBhICsgYiwgMCk7XG59XG4iLCJpbXBvcnQgeyBuYWtlZDEsIG5ha2VkMjM0IH0gZnJvbSBcIi4vdG5xLW5ha2Vkcy5qc1wiO1xuaW1wb3J0IHsgaGlkZGVuMTIzNCB9IGZyb20gXCIuL3RucS1oaWRkZW5zLmpzXCI7XG5pbXBvcnQgeyBwb2ludGluZywgY2xhaW1pbmcgfSBmcm9tIFwiLi90bnEtcG9pbnRpbmcuanNcIjtcbmltcG9ydCB7IHhXaW5nIH0gZnJvbSBcIi4vdG5xLXh3aW5nLmpzXCI7XG5cbmNsYXNzIFN0cmF0ZWd5IHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBkaWZmaWN1bHR5LCBmaW5kTW92ZXMpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5kaWZmaWN1bHR5ID0gZGlmZmljdWx0eTtcbiAgICAgICAgdGhpcy5maW5kTW92ZXMgPSBmaW5kTW92ZXM7XG4gICAgfVxufVxuXG5jb25zdCBzdHJhdGVnaWVzID0gW1xuICAgIG5ldyBTdHJhdGVneShcIk5ha2VkIFNpbmdsZVwiLCAwLCAoYikgPT4gbmFrZWQxKGIpKSxcbiAgICBuZXcgU3RyYXRlZ3koXCJIaWRkZW4gU2luZ2xlXCIsIDAsIChiKSA9PiBoaWRkZW4xMjM0KGIsIDEpKSwgXG4gICAgbmV3IFN0cmF0ZWd5KFwiTmFrZWQgRG91YmxlXCIsIDEsIChiKSA9PiBuYWtlZDIzNChiLCAyKSksXG4gICAgbmV3IFN0cmF0ZWd5KFwiSGlkZGVuIERvdWJsZVwiLCAxLCAoYikgPT4gaGlkZGVuMTIzNChiLCAyKSksIFxuICAgIG5ldyBTdHJhdGVneShcIk5ha2VkIFRyaXBsZVwiLCAxLCAoYikgPT4gbmFrZWQyMzQoYiwgMykpLFxuICAgIG5ldyBTdHJhdGVneShcIkhpZGRlbiBUcmlwbGVcIiwgMiwgKGIpID0+IGhpZGRlbjEyMzQoYiwgMykpLFxuICAgIG5ldyBTdHJhdGVneShcIk5ha2VkIFF1YWRydXBsZVwiLCAyLCAoYikgPT4gbmFrZWQyMzQoYiwgNCkpLFxuICAgIG5ldyBTdHJhdGVneShcIkhpZGRlbiBRdWFkcnVwbGVcIiwgMiwgKGIpID0+IGhpZGRlbjEyMzQoYiwgNCkpLFxuICAgIG5ldyBTdHJhdGVneShcIlBvaW50aW5nXCIsIDIsIChiKSA9PiBwb2ludGluZyhiKSksXG4gICAgbmV3IFN0cmF0ZWd5KFwiQ2xhaW1pbmdcIiwgMiwgKGIpID0+IGNsYWltaW5nKGIpKSxcbiAgICBuZXcgU3RyYXRlZ3koXCJYLVdpbmdcIiwgMiwgKGIpID0+IHhXaW5nKGIsIDIpKSxcbiAgICBuZXcgU3RyYXRlZ3koXCJTd29yZGZpc2hcIiwgMiwgKGIpID0+IHhXaW5nKGIsIDMpKSxcbiAgICBuZXcgU3RyYXRlZ3koXCJKZWxseWZpc2hcIiwgMywgKGIpID0+IHhXaW5nKGIsIDQpKSxcbl07XG5cblxuZnVuY3Rpb24gZmluZE1vdmUoYm9hcmQpIHtcbiAgICBjb25zb2xlLnRpbWUoXCJmaW5kTW92ZVwiKTtcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IHN0cmF0ZWd5IG9mIHN0cmF0ZWdpZXMpIHtcbiAgICAgICAgY29uc29sZS50aW1lKGAgICR7c3RyYXRlZ3kubmFtZX1gKVxuICAgICAgICBjb25zdCBtb3ZlcyA9IHN0cmF0ZWd5LmZpbmRNb3Zlcyhib2FyZCk7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZChgICAke3N0cmF0ZWd5Lm5hbWV9YClcbiAgICAgICAgaWYgKG1vdmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG1vdmVzLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYi5kZWFkTm90ZXMubGVuZ3RoIC0gYS5kZWFkTm90ZXMubGVuZ3RoO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtb3ZlcylcbiAgICAgICAgICAgIHJlc3VsdCA9IG1vdmVzWzBdO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc29sZS50aW1lRW5kKFwiZmluZE1vdmVcIik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGNvbnN0IGNhbGMgPSB7IGZpbmRNb3ZlIH07IiwiLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbmltcG9ydCB7IEJvYXJkIH0gZnJvbSBcIi4vY2xhc3MtQm9hcmQuanNcIjtcbmltcG9ydCB7IHNxcyB9IGZyb20gXCIuL21vZHMvbW9kLXNxcy5qc1wiO1xuaW1wb3J0IHsgZmlsZSB9IGZyb20gXCIuL21vZHMvbW9kLWZpbGUuanNcIjtcbmltcG9ydCB7IGRvbSB9IGZyb20gXCIuL2RvbS5qc1wiO1xuaW1wb3J0IHsgY2FsYyB9IGZyb20gXCIuL2NhbGMvbW9kLWNhbGMuanNcIjtcblxuY29uc3QgYm9hcmQgPSBuZXcgQm9hcmQoKTtcbmxldCBzdGF0ZTtcbmxldCBtb3ZlO1xuXG4vLyBsZXQgbW92ZSA9IGNhbGMuZmluZE1vdmUoYm9hcmQpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgYm9hcmQucmVzZXRBbGwoKTtcbiAgICBzdGF0ZSA9IG5ldyBTZXR1cE1vZGUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0RGVmYXVsdCgpIHtcbiAgICBib2FyZC5yZXNldEFsbCgpO1xuICAgIGNvbnN0IHNxdWFyZXMgPSBbXG4gICAgICAgIDAsIDEsIDIsIDUsIDEyLCAxNCwgMTYsIDE4LCAyMywgMjksIDMxLCAzMywgMzQsIDM1LCAzNiwgNDAsIDQxLCA0NywgNTIsIDU3LCA1OSxcbiAgICAgICAgNjIsIDcxLCA3NiwgNzgsIDgwLFxuICAgIF07XG4gICAgY29uc3QgdmFsdWVzID0gW1xuICAgICAgICA2LCA4LCA3LCA0LCAzLCA5LCA3LCA5LCA4LCA1LCAzLCAxLCA2LCA3LCA0LCA3LCAxLCAzLCA4LCAyLCA3LCAzLCA1LCA5LCA4LCA0LFxuICAgIF07XG4gICAgc3F1YXJlcy5mb3JFYWNoKChzLCBpKSA9PiBib2FyZC5zZXRWYWx1ZShzLCB2YWx1ZXNbaV0pKTtcbiAgICBzdGF0ZSA9IG5ldyBTZXR1cE1vZGUoKTtcbn1cblxuZXhwb3J0IGNvbnN0IGJ1dHRvbkFjdGlvbiA9IHtcbiAgICByZXNldCgpIHtcbiAgICAgICAgaWYgKGNvbmZpcm0oXCJSZXNldCBiYWNrIHRvIGVtcHR5IGJvYXJkIC0gYXJlIHlvdSBzdXJlP1wiKSkge1xuICAgICAgICAgICAgc3RhcnQoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVzdGFydCgpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgY29uZmlybShcIlJldHVybiB0byBzdGFydCBwb3NpdGlvbiAtIGFyZSB5b3Ugc3VyZT9cXG5BbGwgcHJvZ3Jlc3Mgd2lsbCBiZSBsb3N0XCIpXG4gICAgICAgICkge1xuICAgICAgICAgICAgZmlsZS5sb2FkU3RhcnQoYm9hcmQpO1xuICAgICAgICAgICAgc3RhdGUgPSBuZXcgU2V0dXBNb2RlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRvbmUoKSB7XG4gICAgICAgIGZpbGUuc2F2ZVN0YXJ0KGJvYXJkKTtcbiAgICAgICAgc3RhdGUgPSBuZXcgR2FtZU1vZGUoKTtcbiAgICB9LFxuICAgIGZvcndhcmQoKSB7XG4gICAgICAgIGZpbGUuZm9yd2FyZEdhbWUoYm9hcmQpO1xuICAgICAgICBkb20uZGlzcGxheUJvYXJkKGJvYXJkKTtcbiAgICAgICAgc3RhdGUgPSBuZXcgR2FtZU1vZGUoKTsgLy8gYmV0dGVyIHRvIGRpc3BsYXkgRE9NP1xuICAgIH0sXG4gICAgYmFjaygpIHtcbiAgICAgICAgZmlsZS5iYWNrR2FtZShib2FyZCk7XG4gICAgICAgIGRvbS5kaXNwbGF5Qm9hcmQoYm9hcmQpO1xuICAgICAgICBzdGF0ZSA9IG5ldyBHYW1lTW9kZSgpO1xuICAgIH0sXG4gICAgcmVjYWxjKCkge1xuICAgICAgICBib2FyZC5yZWNhbGN1bGF0ZUFsbE5vdGVzKCk7XG4gICAgICAgIGRvbS5kaXNwbGF5Qm9hcmQoYm9hcmQpO1xuICAgICAgICBmaWxlLnNhdmVHYW1lKGJvYXJkKTtcbiAgICB9LFxuICAgIGNsdWUoKSB7XG4gICAgICAgIG1vdmUgPSBjYWxjLmZpbmRNb3ZlKGJvYXJkKTtcbiAgICAgICAgaWYgKG1vdmUpIHtcbiAgICAgICAgICAgIHN0YXRlID0gbmV3IEhpbnRNb2RlKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc2hvdygpIHtcbiAgICAgICAgc3RhdGUgPSBuZXcgSGludE1vZGUodHJ1ZSk7XG4gICAgfSxcbiAgICBoaWRlKCkge1xuICAgICAgICBkb20ucmVtb3ZlTW92ZSgpO1xuICAgICAgICBzdGF0ZSA9IG5ldyBHYW1lTW9kZSgpO1xuICAgIH0sXG59O1xuXG5jb25zdCBhY3Rpb24gPSB7XG4gICAgcmVtb3ZlTm90ZShpLCBqKSB7XG4gICAgICAgIGJvYXJkLnJlbW92ZU5vdGUoaSwgaik7XG4gICAgICAgIGRvbS5kaXNwbGF5UmVtb3ZlTm90ZShpLCBqKTtcbiAgICAgICAgZmlsZS5zYXZlR2FtZShib2FyZCk7XG4gICAgfSxcbiAgICByZWluc3RhdGVNaXNzaW5nTm90ZShpLCBqKSB7XG4gICAgICAgIGlmIChzcXMucGVlcnNbaV0uZXZlcnkoKHNxKSA9PiBib2FyZC5nZXRWYWx1ZShzcSkgIT09IGopKSB7XG4gICAgICAgICAgICBib2FyZC5hZGROb3RlKGksIGopO1xuICAgICAgICAgICAgZG9tLmRpc3BsYXlBZGROb3RlKGksIGopO1xuICAgICAgICAgICAgZmlsZS5zYXZlR2FtZShib2FyZCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNldFZhbHVlKGksIGopIHtcbiAgICAgICAgYm9hcmQuc2V0VmFsdWUoaSwgaik7XG4gICAgICAgIGRvbS5kaXNwbGF5Qm9hcmQoYm9hcmQpO1xuICAgICAgICBmaWxlLnNhdmVHYW1lKGJvYXJkKTtcbiAgICAgICAgc3RhdGUgPSBib2FyZC5pc0NvbXBsZXRlKCkgPyBuZXcgRW5kTW9kZSgpIDogbmV3IEdhbWVNb2RlKCk7XG4gICAgfSxcbiAgICB1bmRvVmFsdWUoaSkge1xuICAgICAgICBib2FyZC51bmRvVmFsdWUoaSk7XG4gICAgICAgIGRvbS5kaXNwbGF5Qm9hcmQoYm9hcmQpO1xuICAgICAgICBmaWxlLnNhdmVHYW1lKGJvYXJkKTtcbiAgICAgICAgc3RhdGUgPSBuZXcgR2FtZU1vZGUoKTtcbiAgICB9LFxuICAgIHNldFZhbHVlT3JSZW1vdmVOb3RlKGksIGopIHtcbiAgICAgICAgaWYgKGJvYXJkLm5vdGVDb3VudChpKSA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZShpLCBqKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlTm90ZShpLCBqKTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuXG5jbGFzcyBFbmRNb2RlIHtcbiAgICBjb25zdHJ1Y3Rvcihib29sKSB7XG4gICAgICAgIGRvbS5kaXNwbGF5QnV0dG9ucyhbXCJiYWNrXCIsIFwicmVzdGFydFwiLCBcInJlc2V0XCJdKTtcbiAgICAgICAgZG9tLmRpc3BsYXlNZXNzYWdlKFwiQ29uZ3JhdHVsYXRpb25zIVwiKTtcbiAgICAgICAgZG9tLmRpc3BsYXlEZXNjcmlwdGlvbihcIlwiKTtcbiAgICB9XG5cbiAgICB2YWx1ZUNsaWNrKGkpIHtcbiAgICAgICAgaWYgKGZpbGUuZ2V0U3RhcnRQb3NpdGlvbigpW2ldKSByZXR1cm47XG4gICAgICAgIGFjdGlvbi51bmRvVmFsdWUoaSk7XG4gICAgICAgIHN0YXRlID0gbmV3IEdhbWVNb2RlKCk7XG4gICAgfVxuXG4gICAgdmFsdWVDbGlja1JpZ2h0KGkpIHtcbiAgICAgICAgdGhpcy52YWx1ZUNsaWNrKGkpO1xuICAgIH1cbn1cblxuY2xhc3MgSGludE1vZGUge1xuICAgIGNvbnN0cnVjdG9yKGJvb2wpIHtcbiAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICAgIGRvbS5kaXNwbGF5TW92ZShtb3ZlKTtcbiAgICAgICAgICAgIGRvbS5kaXNwbGF5QnV0dG9ucyhbXCJoaWRlXCJdKTtcbiAgICAgICAgICAgIGRvbS5kaXNwbGF5TWVzc2FnZShtb3ZlLnR5cGUpO1xuICAgICAgICAgICAgZG9tLmRpc3BsYXlEZXNjcmlwdGlvbihtb3ZlLmRlc2NyaXB0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChtb3ZlLnR5cGUgIT09IFwiTmFrZWQgU2luZ2xlXCIpIHtcbiAgICAgICAgICAgICAgICBkb20uZGlzcGxheU1vdmVMaW5lU3FzKG1vdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9tLmRpc3BsYXlCdXR0b25zKFtcInNob3dcIiwgXCJoaWRlXCJdKTtcbiAgICAgICAgICAgIGRvbS5kaXNwbGF5RGVzY3JpcHRpb24obW92ZS5oaW50KTtcbiAgICAgICAgICAgIGRvbS5kaXNwbGF5TWVzc2FnZShtb3ZlLnR5cGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFsdWVDbGljayhpKSB7XG4gICAgICAgIGlmIChmaWxlLmdldFN0YXJ0UG9zaXRpb24oKVtpXSkgcmV0dXJuO1xuICAgICAgICBhY3Rpb24udW5kb1ZhbHVlKGkpO1xuICAgIH1cblxuICAgIHZhbHVlQ2xpY2tSaWdodChpKSB7XG4gICAgICAgIHRoaXMudmFsdWVDbGljayhpKTtcbiAgICB9XG5cbiAgICBwcmVzZW50Tm90ZUNsaWNrKGksIGopIHtcbiAgICAgICAgYWN0aW9uLnNldFZhbHVlT3JSZW1vdmVOb3RlKGksIGopO1xuICAgICAgICBpZiAobW92ZS5kZWFkTm90ZXMuZXZlcnkoKGUpID0+ICFib2FyZC5oYXNOb3RlKGUuY2VsbCwgZS5ub3RlKSkpIHtcbiAgICAgICAgICAgIGRvbS5yZW1vdmVNb3ZlKCk7XG4gICAgICAgICAgICBzdGF0ZSA9IG5ldyBHYW1lTW9kZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJlc2VudE5vdGVDbGlja1JpZ2h0KGksIGopIHtcbiAgICAgICAgYWN0aW9uLnNldFZhbHVlKGksIGopO1xuICAgIH1cblxuICAgIG1pc3NpbmdOb3RlQ2xpY2soaSwgaikge1xuICAgICAgICBhY3Rpb24ucmVpbnN0YXRlTWlzc2luZ05vdGUoaSwgaik7XG4gICAgfVxuXG4gICAgbWlzc2luZ05vdGVDbGlja1JpZ2h0KGksIGopIHtcbiAgICAgICAgdGhpcy5taXNzaW5nTm90ZUNsaWNrKGksIGopO1xuICAgIH1cbn1cblxuY2xhc3MgR2FtZU1vZGUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBkb20uZGlzcGxheUJ1dHRvbnMoW1wiY2x1ZVwiLCBcInJlY2FsY1wiLCBcImJhY2tcIiwgXCJmb3J3YXJkXCIsIFwicmVzdGFydFwiLCBcInJlc2V0XCJdKTtcbiAgICAgICAgZG9tLmRpc3BsYXlNZXNzYWdlKFwiR2V0IHNvbHZpbmchXCIpO1xuICAgICAgICBkb20uZGlzcGxheURlc2NyaXB0aW9uKFwiVXNlIGJvdGggbW91c2UgYnV0dG9ucyB0byB0b2dnbGUgdmFsdWVzIGFuZCBub3Rlc1wiKTtcbiAgICB9XG5cbiAgICB2YWx1ZUNsaWNrKGkpIHtcbiAgICAgICAgaWYgKGZpbGUuZ2V0U3RhcnRQb3NpdGlvbigpW2ldKSByZXR1cm47XG4gICAgICAgIGFjdGlvbi51bmRvVmFsdWUoaSk7XG4gICAgfVxuXG4gICAgdmFsdWVDbGlja1JpZ2h0KGkpIHtcbiAgICAgICAgdGhpcy52YWx1ZUNsaWNrKGkpO1xuICAgIH1cblxuICAgIHByZXNlbnROb3RlQ2xpY2soaSwgaikge1xuICAgICAgICBhY3Rpb24uc2V0VmFsdWVPclJlbW92ZU5vdGUoaSwgaik7XG4gICAgfVxuXG4gICAgcHJlc2VudE5vdGVDbGlja1JpZ2h0KGksIGopIHtcbiAgICAgICAgYWN0aW9uLnNldFZhbHVlKGksIGopO1xuICAgIH1cblxuICAgIG1pc3NpbmdOb3RlQ2xpY2soaSwgaikge1xuICAgICAgICBhY3Rpb24ucmVpbnN0YXRlTWlzc2luZ05vdGUoaSwgaik7XG4gICAgfVxuXG4gICAgbWlzc2luZ05vdGVDbGlja1JpZ2h0KGksIGopIHtcbiAgICAgICAgYWN0aW9uLnJlaW5zdGF0ZU1pc3NpbmdOb3RlKGksIGopO1xuICAgIH1cbn1cblxuY2xhc3MgU2V0dXBNb2RlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgZG9tLmRpc3BsYXlCb2FyZChib2FyZCk7XG4gICAgICAgIGRvbS5kaXNwbGF5QnV0dG9ucyhbXCJkb25lXCIsIFwicmVzZXRcIl0pO1xuICAgICAgICBkb20uZGlzcGxheU1lc3NhZ2UoXCJDcmVhdGUgc3RhcnQgcG9zaXRpb25cIik7XG4gICAgICAgIGRvbS5kaXNwbGF5RGVzY3JpcHRpb24oXCJDbGljayBkb25lIHdoZW4gcmVhZHlcIik7XG4gICAgfVxuXG4gICAgdmFsdWVDbGljayhpKSB7XG4gICAgICAgIGJvYXJkLnVuZG9WYWx1ZShpKTtcbiAgICAgICAgZG9tLmRpc3BsYXlCb2FyZChib2FyZCk7XG4gICAgfVxuXG4gICAgdmFsdWVDbGlja1JpZ2h0KGkpIHtcbiAgICAgICAgdGhpcy52YWx1ZUNsaWNrKGkpO1xuICAgIH1cblxuICAgIHByZXNlbnROb3RlQ2xpY2soaSwgaikge1xuICAgICAgICBib2FyZC5zZXRWYWx1ZShpLCBqKTtcbiAgICAgICAgZG9tLmRpc3BsYXlCb2FyZChib2FyZCk7XG4gICAgICAgIHRoaXMuI2NoZWNrSWZQb3NpdGlvbkludmFsaWQoKTtcbiAgICB9XG5cbiAgICBwcmVzZW50Tm90ZUNsaWNrUmlnaHQoaSwgaikge1xuICAgICAgICB0aGlzLnByZXNlbnROb3RlQ2xpY2soaSwgaik7XG4gICAgfVxuXG4gICAgbWlzc2luZ05vdGVDbGljayhpLCBqKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBtaXNzaW5nTm90ZUNsaWNrUmlnaHQoaSwgaikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgI2NoZWNrSWZQb3NpdGlvbkludmFsaWQoKSB7XG4gICAgICAgIGNvbnN0IGludmFsaWRTdWJzZXQgPSBib2FyZC5maW5kSW52YWxpZFN1YnNldCgpO1xuICAgICAgICBpZiAoaW52YWxpZFN1YnNldCkge1xuICAgICAgICAgICAgc3RhdGUgPSBuZXcgSW52YWxpZE1vZGUoaW52YWxpZFN1YnNldCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIEludmFsaWRNb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihpbnZhbGlkU3Vic2V0KSB7XG4gICAgICAgIGNvbnN0IHN0YW5kYXJkRGVzY3JpcHRpb24gPVxuICAgICAgICAgICAgaW52YWxpZFN1YnNldC5saW5lLmxlbmd0aCA9PT0gMFxuICAgICAgICAgICAgICAgID8gXCJDZWxsIGhhcyBubyBub3RlcyBhdmFpbGFibGUgLSB1bmRvIG9yIHJlc2V0XCJcbiAgICAgICAgICAgICAgICA6IFwiSGlnaGxpZ2h0ZWQgY2VsbHMgaGF2ZSBpbnN1ZmZpY2llbnQgbm90ZXMgYXZhaWxhYmxlIC0gdW5kbyBvciByZXNldFwiO1xuICAgICAgICBkb20uZGlzcGxheUludmFsaWQoaW52YWxpZFN1YnNldCk7XG4gICAgICAgIGRvbS5kaXNwbGF5QnV0dG9ucyhbXCJyZXNldFwiXSk7XG4gICAgICAgIGRvbS5kaXNwbGF5TWVzc2FnZShcIkludmFsaWQgcG9zaXRpb25cIik7XG4gICAgICAgIGRvbS5kaXNwbGF5RGVzY3JpcHRpb24oc3RhbmRhcmREZXNjcmlwdGlvbik7XG4gICAgfVxuXG4gICAgdmFsdWVDbGljayhpKSB7XG4gICAgICAgIGJvYXJkLnVuZG9WYWx1ZShpKTtcbiAgICAgICAgZG9tLmRpc3BsYXlCb2FyZChib2FyZCk7XG4gICAgICAgIHRoaXMuI2NoZWNrSWZQb3NpdGlvblZhbGlkKCk7XG4gICAgfVxuXG4gICAgdmFsdWVDbGlja1JpZ2h0KGkpIHtcbiAgICAgICAgdGhpcy52YWx1ZUNsaWNrKGkpO1xuICAgIH1cblxuICAgIHByZXNlbnROb3RlQ2xpY2soaSwgaikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJlc2VudE5vdGVDbGlja1JpZ2h0KGksIGopIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG1pc3NpbmdOb3RlQ2xpY2soaSwgaikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbWlzc2luZ05vdGVDbGlja1JpZ2h0KGksIGopIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICNjaGVja0lmUG9zaXRpb25WYWxpZCgpIHtcbiAgICAgICAgZG9tLnJlbW92ZUludmFsaWQoKTtcbiAgICAgICAgY29uc3QgaW52YWxpZFN1YnNldCA9IGJvYXJkLmZpbmRJbnZhbGlkU3Vic2V0KCk7XG4gICAgICAgIGlmIChpbnZhbGlkU3Vic2V0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IG5ldyBJbnZhbGlkTW9kZShpbnZhbGlkU3Vic2V0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gbmV3IFNldHVwTW9kZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IFwiLi9zdHlsZS5jc3NcIjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5pbXBvcnQgeyBzdGFydCwgc3RhcnREZWZhdWx0IH0gZnJvbSBcIi4vY29udHJvbC5qc1wiO1xuXG4vLyBzdGFydCgpO1xuc3RhcnREZWZhdWx0KCk7XG5cblxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///760\n')},825:module=>{eval('\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = "";\n  if (obj.supports) {\n    css += "@supports (".concat(obj.supports, ") {");\n  }\n  if (obj.media) {\n    css += "@media ".concat(obj.media, " {");\n  }\n  var needLayer = typeof obj.layer !== "undefined";\n  if (needLayer) {\n    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");\n  }\n  css += obj.css;\n  if (needLayer) {\n    css += "}";\n  }\n  if (obj.media) {\n    css += "}";\n  }\n  if (obj.supports) {\n    css += "}";\n  }\n  var sourceMap = obj.sourceMap;\n  if (sourceMap && typeof btoa !== "undefined") {\n    css += "\\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");\n  }\n\n  // For old IE\n  /* istanbul ignore if  */\n  options.styleTagTransform(css, styleElement, options.options);\n}\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n  styleElement.parentNode.removeChild(styleElement);\n}\n\n/* istanbul ignore next  */\nfunction domAPI(options) {\n  if (typeof document === "undefined") {\n    return {\n      update: function update() {},\n      remove: function remove() {}\n    };\n  }\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\nmodule.exports = domAPI;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsaUZBQWlGO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3Vkb2t1Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanM/ZTQ3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///825\n')}},__webpack_module_cache__={};function __webpack_require__(I){var n=__webpack_module_cache__[I];if(void 0!==n)return n.exports;var g=__webpack_module_cache__[I]={id:I,exports:{}};return __webpack_modules__[I](g,g.exports,__webpack_require__),g.exports}__webpack_require__.n=I=>{var n=I&&I.__esModule?()=>I.default:()=>I;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(I,n)=>{for(var g in n)__webpack_require__.o(n,g)&&!__webpack_require__.o(I,g)&&Object.defineProperty(I,g,{enumerable:!0,get:n[g]})},__webpack_require__.o=(I,n)=>Object.prototype.hasOwnProperty.call(I,n),__webpack_require__.nc=void 0;var __webpack_exports__=__webpack_require__(760)})();