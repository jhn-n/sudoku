const NNBipartitions = [];
console.time("NNBiparts")
for (let n = 0; n < 10; n++) {
    NNBipartitions.push(BipartitionsOfNaturalNumbers(n))
}
console.timeEnd("NNBiparts")

function BipartitionsOfNaturalNumbers(n) {
    const partitions = [...Array(n+1)].map(e => []);

    for (let m = 0; m < 1 << n; m++) {
        const subsetA = [];
        const subsetB = [];
        for (let i = 0; i < n; i++) {
            if (m & (1 << i)) {
                subsetA.push(i);
            } else {
                subsetB.push(i);
            }
        }
        partitions[subsetA.length].push([subsetA,subsetB]);
    }
    return partitions
}

function NNCombskOutOfn(k, n) {
    const combs = NNBipartitions[n][k];
    for (const comb of combs) {
        console.log(comb[0], comb[1]);
    }
}

function allNNCombsOfn(n) {
    for (let k = 0; k <= n; k++) {
        console.log(NNBipartitions[n][k].length)
        console.log(NNBipartitions[n][k][0])
        
    }
}

const a = BipartitionsOfNaturalNumbers(4);
allNNCombsOfn(9);

export default {};
